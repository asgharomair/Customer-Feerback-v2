{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a multi-industry feedback management SaaS platform that enables businesses to collect customer feedback through QR codes and manage it via a comprehensive dashboard. The application serves multiple business customers across various industries including restaurants, healthcare, retail, and hospitality. Key features include QR code-based feedback collection, real-time analytics, customizable survey templates, multimedia feedback support (voice and images), and automated alert systems for critical feedback.\n\n# User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n# System Architecture\n\n## Frontend Architecture\n- **Framework**: React with TypeScript using Vite as the build tool\n- **Routing**: Wouter for client-side routing with tab-based navigation\n- **State Management**: TanStack Query (React Query) for server state management and caching\n- **UI Components**: Radix UI components with shadcn/ui styling system\n- **Styling**: Tailwind CSS with CSS variables for theming and responsive design\n- **Form Handling**: React Hook Form with Zod for validation\n\n## Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Database ORM**: Drizzle ORM with PostgreSQL as the database\n- **Real-time Features**: WebSocket server for live notifications and alerts\n- **File Upload**: Uppy with direct-to-cloud storage integration\n- **Multi-tenancy**: Database-level tenant isolation with shared schema\n\n## Database Design\n- **Multi-tenant Architecture**: Tenant-based data isolation with shared database schema\n- **Core Entities**: Tenants, Users, Locations, Survey Templates, QR Codes, Feedback Responses, Alert Rules, and Analytics\n- **Session Management**: Database-stored sessions for authentication\n- **Schema Management**: Drizzle migrations with PostgreSQL dialect\n\n## Real-time System\n- **WebSocket Integration**: Live notifications for critical feedback alerts\n- **Client-side Connection**: Automatic reconnection with tenant-based message routing\n- **Alert Broadcasting**: Targeted notifications to specific tenant users\n\n## Authentication & Authorization\n- **Session-based Authentication**: Server-side session management\n- **Multi-tenant Access Control**: Tenant-scoped data access and user permissions\n- **Role-based Permissions**: Admin and user roles with different access levels\n\n## File Management\n- **Object Storage**: Google Cloud Storage integration with ACL-based access control\n- **Upload Handling**: Direct-to-cloud uploads with progress tracking\n- **Media Support**: Voice recordings and image attachments for feedback\n\n# External Dependencies\n\n## Database & Storage\n- **Neon Database**: PostgreSQL serverless database hosting\n- **Google Cloud Storage**: Object storage for multimedia files and assets\n- **Drizzle Kit**: Database migration and schema management tools\n\n## Communication Services\n- **SendGrid**: Email service for notifications and alerts\n- **WebSocket Protocol**: Native WebSocket for real-time features\n\n## Development & Deployment\n- **Replit Infrastructure**: Hosting platform with sidecar authentication\n- **Vite Development Server**: Hot module replacement and development tooling\n- **TypeScript**: Type safety across the full stack\n\n## Frontend Libraries\n- **Radix UI**: Headless UI components for accessibility\n- **Recharts**: Data visualization for analytics dashboard\n- **QRCode Library**: QR code generation for feedback links\n- **Uppy**: File upload handling with progress tracking\n\n## Validation & Utilities\n- **Zod**: Runtime type validation and schema definition\n- **Class Variance Authority**: CSS class management utilities\n- **React Beautiful DnD**: Drag and drop for survey builder interface","size_bytes":3702},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"attached_assets/api_documentation_1754199661057.md":{"content":"# API Documentation & Specifications\n## Multi-Industry Feedback Management SaaS Platform\n\n### Document Information\n- **Version:** 1.0\n- **Date:** August 2025\n- **API Version:** v1\n- **Base URL:** `https://api.feedbackplatform.com/v1`\n\n---\n\n## 1. API Overview\n\n### 1.1 Authentication\nAll API requests require authentication via JWT Bearer tokens.\n\n```http\nAuthorization: Bearer <jwt_token>\n```\n\n### 1.2 Request/Response Format\n- **Content-Type:** `application/json`\n- **Character Encoding:** UTF-8\n- **Date Format:** ISO 8601 (e.g., `2025-08-03T10:30:00Z`)\n\n### 1.3 Rate Limiting\n- **Default:** 1000 requests/hour per tenant\n- **Burst:** 100 requests/minute\n- **Headers:**\n  - `X-RateLimit-Limit`: Request limit per window\n  - `X-RateLimit-Remaining`: Requests remaining in window\n  - `X-RateLimit-Reset`: Window reset time (Unix timestamp)\n\n### 1.4 Error Handling\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Validation failed\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Email is required\",\n        \"code\": \"REQUIRED\"\n      }\n    ]\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\",\n  \"request_id\": \"req_123456789\"\n}\n```\n\n---\n\n## 2. Authentication Endpoints\n\n### 2.1 User Login\n```http\nPOST /auth/login\n```\n\n**Request Body:**\n```json\n{\n  \"email\": \"user@company.com\",\n  \"password\": \"securePassword123\",\n  \"remember_me\": false\n}\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n    \"refresh_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n    \"expires_in\": 900,\n    \"token_type\": \"Bearer\",\n    \"user\": {\n      \"user_id\": \"550e8400-e29b-41d4-a716-446655440000\",\n      \"email\": \"user@company.com\",\n      \"first_name\": \"John\",\n      \"last_name\": \"Doe\",\n      \"role\": \"admin\",\n      \"tenant_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n      \"permissions\": [\"read:feedback\", \"write:surveys\", \"manage:users\"]\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 2.2 Refresh Token\n```http\nPOST /auth/refresh\n```\n\n**Request Body:**\n```json\n{\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIs...\"\n}\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"access_token\": \"eyJhbGciOiJIUzI1NiIs...\",\n    \"expires_in\": 900,\n    \"token_type\": \"Bearer\"\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 2.3 User Registration\n```http\nPOST /auth/register\n```\n\n**Request Body:**\n```json\n{\n  \"email\": \"newuser@company.com\",\n  \"password\": \"securePassword123\",\n  \"first_name\": \"Jane\",\n  \"last_name\": \"Smith\",\n  \"company_name\": \"Acme Corporation\",\n  \"industry_type\": \"restaurant\",\n  \"phone_number\": \"+1234567890\"\n}\n```\n\n### 2.4 Logout\n```http\nPOST /auth/logout\n```\n\n**Request Body:**\n```json\n{\n  \"refresh_token\": \"eyJhbGciOiJIUzI1NiIs...\"\n}\n```\n\n---\n\n## 3. Tenant Management\n\n### 3.1 Get Tenant Profile\n```http\nGET /tenants/profile\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"tenant_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n    \"company_name\": \"Acme Restaurant Group\",\n    \"industry_type\": \"restaurant\",\n    \"subscription_plan\": \"professional\",\n    \"created_at\": \"2025-01-15T08:00:00Z\",\n    \"is_active\": true,\n    \"contact_details\": {\n      \"phone\": \"+1234567890\",\n      \"address\": \"123 Main St, City, State 12345\",\n      \"website\": \"https://acmerestaurants.com\"\n    },\n    \"timezone\": \"America/New_York\",\n    \"settings\": {\n      \"default_language\": \"en\",\n      \"date_format\": \"MM/DD/YYYY\",\n      \"currency\": \"USD\"\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 3.2 Update Tenant Profile\n```http\nPUT /tenants/profile\n```\n\n**Request Body:**\n```json\n{\n  \"company_name\": \"Acme Restaurant Group Updated\",\n  \"contact_details\": {\n    \"phone\": \"+1234567891\",\n    \"address\": \"456 New St, City, State 12345\",\n    \"website\": \"https://newacmerestaurants.com\"\n  },\n  \"timezone\": \"America/Los_Angeles\"\n}\n```\n\n---\n\n## 4. Survey Management\n\n### 4.1 Get Survey Templates\n```http\nGET /surveys/templates?industry=restaurant&page=1&limit=20\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"templates\": [\n      {\n        \"template_id\": \"550e8400-e29b-41d4-a716-446655440002\",\n        \"template_name\": \"Restaurant Feedback Template\",\n        \"industry_type\": \"restaurant\",\n        \"is_default\": true,\n        \"is_active\": true,\n        \"created_at\": \"2025-01-15T08:00:00Z\",\n        \"template_structure\": {\n          \"sections\": [\n            {\n              \"section_id\": \"basic_info\",\n              \"title\": \"Basic Information\",\n              \"fields\": [\n                {\n                  \"field_id\": \"customer_name\",\n                  \"field_name\": \"Customer Name\",\n                  \"field_type\": \"text\",\n                  \"is_required\": true,\n                  \"display_order\": 1\n                },\n                {\n                  \"field_id\": \"table_number\",\n                  \"field_name\": \"Table Number\",\n                  \"field_type\": \"text\",\n                  \"is_required\": false,\n                  \"display_order\": 2\n                }\n              ]\n            },\n            {\n              \"section_id\": \"feedback\",\n              \"title\": \"Feedback\",\n              \"fields\": [\n                {\n                  \"field_id\": \"overall_rating\",\n                  \"field_name\": \"Overall Rating\",\n                  \"field_type\": \"rating\",\n                  \"is_required\": true,\n                  \"display_order\": 1,\n                  \"validation_rules\": {\n                    \"min\": 1,\n                    \"max\": 5\n                  }\n                }\n              ]\n            }\n          ]\n        }\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 20,\n      \"total\": 1,\n      \"total_pages\": 1\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 4.2 Create Survey Template\n```http\nPOST /surveys/templates\n```\n\n**Request Body:**\n```json\n{\n  \"template_name\": \"Custom Restaurant Template\",\n  \"industry_type\": \"restaurant\",\n  \"template_structure\": {\n    \"sections\": [\n      {\n        \"section_id\": \"basic_info\",\n        \"title\": \"Customer Information\",\n        \"fields\": [\n          {\n            \"field_name\": \"Customer Name\",\n            \"field_type\": \"text\",\n            \"is_required\": true,\n            \"display_order\": 1\n          },\n          {\n            \"field_name\": \"Phone Number\",\n            \"field_type\": \"phone\",\n            \"is_required\": false,\n            \"display_order\": 2\n          }\n        ]\n      }\n    ]\n  }\n}\n```\n\n### 4.3 Get Custom Fields\n```http\nGET /surveys/custom-fields\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"custom_fields\": [\n      {\n        \"field_definition_id\": \"550e8400-e29b-41d4-a716-446655440003\",\n        \"field_name\": \"Dietary Preferences\",\n        \"field_type\": \"dropdown\",\n        \"field_options\": {\n          \"options\": [\n            {\"value\": \"vegetarian\", \"label\": \"Vegetarian\"},\n            {\"value\": \"vegan\", \"label\": \"Vegan\"},\n            {\"value\": \"gluten_free\", \"label\": \"Gluten Free\"},\n            {\"value\": \"none\", \"label\": \"No Restrictions\"}\n          ]\n        },\n        \"is_required\": false,\n        \"display_order\": 5,\n        \"is_active\": true,\n        \"created_at\": \"2025-02-01T10:00:00Z\"\n      }\n    ]\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 4.4 Create Custom Field\n```http\nPOST /surveys/custom-fields\n```\n\n**Request Body:**\n```json\n{\n  \"field_name\": \"Special Requests\",\n  \"field_type\": \"textarea\",\n  \"is_required\": false,\n  \"display_order\": 10,\n  \"validation_rules\": {\n    \"max_length\": 500\n  }\n}\n```\n\n---\n\n## 5. QR Code Management\n\n### 5.1 Get QR Codes\n```http\nGET /qr-codes?location_id=550e8400-e29b-41d4-a716-446655440004&page=1&limit=20\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"qr_codes\": [\n      {\n        \"qr_code_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n        \"location_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n        \"qr_code_data\": \"https://app.feedbackplatform.com/feedback/550e8400-e29b-41d4-a716-446655440005\",\n        \"table_number\": \"T001\",\n        \"encoded_url\": \"https://api.qrserver.com/v1/create-qr-code/?data=...\",\n        \"is_active\": true,\n        \"created_at\": \"2025-02-01T08:00:00Z\",\n        \"last_scanned\": \"2025-08-03T09:30:00Z\",\n        \"scan_count\": 47\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 20,\n      \"total\": 25,\n      \"total_pages\": 2\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 5.2 Create QR Code\n```http\nPOST /qr-codes\n```\n\n**Request Body:**\n```json\n{\n  \"location_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n  \"table_number\": \"T025\",\n  \"bed_number\": null,\n  \"custom_data\": {\n    \"section\": \"Patio\",\n    \"server_name\": \"John\"\n  }\n}\n```\n\n**Response (201 Created):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"qr_code_id\": \"550e8400-e29b-41d4-a716-446655440006\",\n    \"qr_code_data\": \"https://app.feedbackplatform.com/feedback/550e8400-e29b-41d4-a716-446655440006\",\n    \"encoded_url\": \"https://api.qrserver.com/v1/create-qr-code/?data=...\",\n    \"printable_url\": \"https://cdn.feedbackplatform.com/qr-codes/550e8400-e29b-41d4-a716-446655440006.pdf\"\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 5.3 Get QR Code Analytics\n```http\nGET /qr-codes/550e8400-e29b-41d4-a716-446655440005/analytics?period=30d\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"qr_code_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n    \"period\": \"30d\",\n    \"analytics\": {\n      \"total_scans\": 47,\n      \"unique_scans\": 42,\n      \"completed_feedback\": 38,\n      \"completion_rate\": 80.85,\n      \"average_rating\": 4.2,\n      \"daily_scans\": [\n        {\"date\": \"2025-07-04\", \"scans\": 2, \"completions\": 2},\n        {\"date\": \"2025-07-05\", \"scans\": 3, \"completions\": 2}\n      ]\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n---\n\n## 6. Feedback Collection\n\n### 6.1 Get Feedback Form (Public)\n```http\nGET /feedback/form/550e8400-e29b-41d4-a716-446655440005\n```\n*Note: This endpoint doesn't require authentication*\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"qr_code_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n    \"company_name\": \"Acme Restaurant\",\n    \"location_name\": \"Downtown Branch\",\n    \"table_number\": \"T001\",\n    \"form_structure\": {\n      \"sections\": [\n        {\n          \"section_id\": \"basic_info\",\n          \"title\": \"Your Information\",\n          \"fields\": [\n            {\n              \"field_id\": \"customer_name\",\n              \"field_name\": \"Name\",\n              \"field_type\": \"text\",\n              \"is_required\": true,\n              \"placeholder\": \"Enter your name\"\n            }\n          ]\n        }\n      ]\n    },\n    \"branding\": {\n      \"logo_url\": \"https://cdn.feedbackplatform.com/logos/tenant_123.png\",\n      \"primary_color\": \"#1976d2\",\n      \"secondary_color\": \"#424242\"\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 6.2 Submit Feedback (Public)\n```http\nPOST /feedback/submit\n```\n*Note: This endpoint doesn't require authentication*\n\n**Request Body:**\n```json\n{\n  \"qr_code_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n  \"customer_name\": \"John Customer\",\n  \"customer_email\": \"john@customer.com\",\n  \"customer_phone\": \"+1234567890\",\n  \"overall_rating\": 5,\n  \"feedback_text\": \"Excellent service and food quality!\",\n  \"custom_fields\": {\n    \"550e8400-e29b-41d4-a716-446655440003\": \"vegetarian\",\n    \"special_requests\": \"Table by the window was perfect\"\n  },\n  \"voice_file_id\": \"550e8400-e29b-41d4-a716-446655440007\",\n  \"image_file_id\": \"550e8400-e29b-41d4-a716-446655440008\"\n}\n```\n\n**Response (201 Created):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"response_id\": \"550e8400-e29b-41d4-a716-446655440009\",\n    \"submitted_at\": \"2025-08-03T10:30:00Z\",\n    \"confirmation_code\": \"FB-2025-001234\"\n  },\n  \"message\": \"Thank you for your feedback!\",\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 6.3 Get Feedback Responses\n```http\nGET /feedback/responses?page=1&limit=20&rating_min=1&rating_max=5&date_from=2025-07-01&date_to=2025-08-03&location_id=550e8400-e29b-41d4-a716-446655440004\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"responses\": [\n      {\n        \"response_id\": \"550e8400-e29b-41d4-a716-446655440009\",\n        \"location_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n        \"qr_code_id\": \"550e8400-e29b-41d4-a716-446655440005\",\n        \"customer_name\": \"John Customer\",\n        \"customer_email\": \"john@customer.com\",\n        \"overall_rating\": 5,\n        \"feedback_text\": \"Excellent service and food quality!\",\n        \"submitted_at\": \"2025-08-03T10:30:00Z\",\n        \"status\": \"new\",\n        \"custom_fields\": [\n          {\n            \"field_name\": \"Dietary Preferences\",\n            \"field_value\": \"vegetarian\"\n          }\n        ],\n        \"multimedia_files\": [\n          {\n            \"file_id\": \"550e8400-e29b-41d4-a716-446655440007\",\n            \"file_type\": \"voice\",\n            \"file_url\": \"https://cdn.feedbackplatform.com/voice/signed_url_here\"\n          }\n        ],\n        \"location_data\": {\n          \"table_number\": \"T001\",\n          \"location_name\": \"Downtown Branch\"\n        }\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 20,\n      \"total\": 156,\n      \"total_pages\": 8\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n---\n\n## 7. File Management (Backblaze Integration)\n\n### 7.1 Upload File\n```http\nPOST /files/upload\nContent-Type: multipart/form-data\n```\n\n**Request Body (multipart/form-data):**\n```\nfile: [binary file data]\nfile_type: \"voice\" | \"image\"\n```\n\n**Response (201 Created):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"file_id\": \"550e8400-e29b-41d4-a716-446655440010\",\n    \"file_name\": \"voice_recording_20250803.mp3\",\n    \"file_type\": \"voice\",\n    \"file_size\": 2048576,\n    \"mime_type\": \"audio/mpeg\",\n    \"uploaded_at\": \"2025-08-03T10:30:00Z\",\n    \"backblaze_file_id\": \"4_z27c88f1d182b150646ff0b16_f200ec4a7a9d6be_d20220330_m130258_c001_v0001017_t0006\",\n    \"cdn_url\": \"https://cdn.feedbackplatform.com/files/550e8400-e29b-41d4-a716-446655440010\",\n    \"expires_at\": \"2025-08-03T11:30:00Z\"\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 7.2 Get File Download URL\n```http\nGET /files/550e8400-e29b-41d4-a716-446655440010/download-url?expires_in=3600\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"download_url\": \"https://cdn.feedbackplatform.com/files/signed_url_with_auth_token\",\n    \"expires_at\": \"2025-08-03T11:30:00Z\"\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n---\n\n## 8. Analytics & Reporting\n\n### 8.1 Get Dashboard Analytics\n```http\nGET /analytics/dashboard?period=30d&location_id=550e8400-e29b-41d4-a716-446655440004\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"period\": \"30d\",\n    \"location_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n    \"metrics\": {\n      \"total_responses\": 156,\n      \"average_rating\": 4.2,\n      \"response_rate\": 82.5,\n      \"nps_score\": 45,\n      \"response_distribution\": {\n        \"1\": 5,\n        \"2\": 8,\n        \"3\": 15,\n        \"4\": 67,\n        \"5\": 61\n      },\n      \"trends\": {\n        \"daily_responses\": [\n          {\"date\": \"2025-07-04\", \"count\": 5, \"avg_rating\": 4.2},\n          {\"date\": \"2025-07-05\", \"count\": 7, \"avg_rating\": 4.1}\n        ]\n      },\n      \"sentiment_analysis\": {\n        \"positive\": 78.2,\n        \"neutral\": 15.4,\n        \"negative\": 6.4\n      }\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 8.2 Generate Report\n```http\nPOST /reports/generate\n```\n\n**Request Body:**\n```json\n{\n  \"report_type\": \"feedback_summary\",\n  \"format\": \"pdf\",\n  \"date_range\": {\n    \"start_date\": \"2025-07-01\",\n    \"end_date\": \"2025-08-03\"\n  },\n  \"filters\": {\n    \"location_ids\": [\"550e8400-e29b-41d4-a716-446655440004\"],\n    \"rating_min\": 1,\n    \"rating_max\": 5\n  },\n  \"include_charts\": true,\n  \"include_raw_data\": false\n}\n```\n\n**Response (202 Accepted):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"report_id\": \"550e8400-e29b-41d4-a716-446655440011\",\n    \"status\": \"processing\",\n    \"estimated_completion\": \"2025-08-03T10:35:00Z\"\n  },\n  \"message\": \"Report generation started. You will be notified when it's ready.\",\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 8.3 Get Report Status\n```http\nGET /reports/550e8400-e29b-41d4-a716-446655440011\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"report_id\": \"550e8400-e29b-41d4-a716-446655440011\",\n    \"report_type\": \"feedback_summary\",\n    \"status\": \"completed\",\n    \"file_format\": \"pdf\",\n    \"generated_at\": \"2025-08-03T10:34:00Z\",\n    \"expires_at\": \"2025-08-10T10:34:00Z\",\n    \"download_url\": \"https://cdn.feedbackplatform.com/reports/signed_url_here\",\n    \"file_size\": 1048576\n  },\n  \"timestamp\": \"2025-08-03T10:35:00Z\"\n}\n```\n\n---\n\n## 9. Alerts & Notifications\n\n### 9.1 Get Alert Rules\n```http\nGET /alerts/rules\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"alert_rules\": [\n      {\n        \"alert_id\": \"550e8400-e29b-41d4-a716-446655440012\",\n        \"alert_name\": \"Low Rating Alert\",\n        \"trigger_conditions\": {\n          \"rating_threshold\": 2,\n          \"condition\": \"less_than_or_equal\",\n          \"time_window\": \"immediate\"\n        },\n        \"notification_channels\": [\"email\", \"sms\"],\n        \"recipient_list\": [\n          {\n            \"type\": \"email\",\n            \"address\": \"manager@acmerestaurant.com\"\n          },\n          {\n            \"type\": \"sms\",\n            \"number\": \"+1234567890\"\n          }\n        ],\n        \"is_active\": true,\n        \"created_at\": \"2025-01-15T08:00:00Z\"\n      }\n    ]\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 9.2 Create Alert Rule\n```http\nPOST /alerts/rules\n```\n\n**Request Body:**\n```json\n{\n  \"alert_name\": \"High Volume Alert\",\n  \"trigger_conditions\": {\n    \"feedback_count\": 50,\n    \"condition\": \"greater_than\",\n    \"time_window\": \"1h\"\n  },\n  \"notification_channels\": [\"email\"],\n  \"recipient_list\": [\n    {\n      \"type\": \"email\",\n      \"address\": \"operations@acmerestaurant.com\"\n    }\n  ],\n  \"message_template\": \"High feedback volume detected: {{feedback_count}} responses in the last hour.\"\n}\n```\n\n---\n\n## 10. Public Review Integration\n\n### 10.1 Get Integrated Reviews\n```http\nGET /reviews/integrated?platform=google&page=1&limit=20&date_from=2025-07-01\n```\n\n**Response (200 OK):**\n```json\n{\n  \"success\": true,\n  \"data\": {\n    \"reviews\": [\n      {\n        \"review_id\": \"550e8400-e29b-41d4-a716-446655440013\",\n        \"platform_name\": \"google\",\n        \"external_review_id\": \"ChZDSUhNMG9nS0VJQ0FnSUM3X3J\",\n        \"reviewer_name\": \"Sarah Johnson\",\n        \"rating\": 5,\n        \"review_text\": \"Amazing food and excellent service! Highly recommend.\",\n        \"review_date\": \"2025-07-15T14:30:00Z\",\n        \"imported_at\": \"2025-07-16T02:00:00Z\",\n        \"platform_data\": {\n          \"author_url\": \"https://www.google.com/maps/contrib/...\",\n          \"relative_time_description\": \"2 weeks ago\"\n        },\n        \"status\": \"published\"\n      }\n    ],\n    \"pagination\": {\n      \"page\": 1,\n      \"limit\": 20,\n      \"total\": 45,\n      \"total_pages\": 3\n    }\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\"\n}\n```\n\n### 10.2 Configure Platform Integration\n```http\nPOST /integrations/configure\n```\n\n**Request Body:**\n```json\n{\n  \"platform_name\": \"google\",\n  \"configuration\": {\n    \"place_id\": \"ChIJN1t_tDeuEmsRUsoyG83frY4\",\n    \"api_key\": \"encrypted_api_key_here\",\n    \"sync_frequency\": \"daily\",\n    \"import_historical\": true,\n    \"historical_days\": 90\n  },\n  \"is_active\": true\n}\n```\n\n---\n\n## 11. Webhook Endpoints\n\n### 11.1 Configure Webhooks\n```http\nPOST /webhooks/configure\n```\n\n**Request Body:**\n```json\n{\n  \"webhook_url\": \"https://your-app.com/webhooks/feedback\",\n  \"events\": [\"feedback.submitted\", \"feedback.rating_low\", \"report.generated\"],\n  \"secret\": \"your_webhook_secret\",\n  \"is_active\": true\n}\n```\n\n### 11.2 Webhook Payload Example\nWhen a new feedback is submitted, your webhook endpoint will receive:\n\n```json\n{\n  \"event\": \"feedback.submitted\",\n  \"timestamp\": \"2025-08-03T10:30:00Z\",\n  \"data\": {\n    \"response_id\": \"550e8400-e29b-41d4-a716-446655440009\",\n    \"tenant_id\": \"550e8400-e29b-41d4-a716-446655440001\",\n    \"location_id\": \"550e8400-e29b-41d4-a716-446655440004\",\n    \"customer_name\": \"John Customer\",\n    \"overall_rating\": 5,\n    \"submitted_at\": \"2025-08-03T10:30:00Z\"\n  },\n  \"signature\": \"sha256=calculated_hmac_signature\"\n}\n```\n\n---\n\n## 12. Error Codes Reference\n\n| Code | HTTP Status | Description |\n|------|-------------|-------------|\n| `INVALID_CREDENTIALS` | 401 | Invalid email or password |\n| `TOKEN_EXPIRED` | 401 | JWT token has expired |\n| `INSUFFICIENT_PERMISSIONS` | 403 | User lacks required permissions |\n| `TENANT_NOT_FOUND` | 404 | Tenant does not exist |\n| `RESOURCE_NOT_FOUND` | 404 | Requested resource not found |\n| `VALIDATION_ERROR` | 422 | Request validation failed |\n| `RATE_LIMIT_EXCEEDED` | 429 | Too many requests |\n| `FILE_TOO_LARGE` | 413 | Uploaded file exceeds size limit |\n| `UNSUPPORTED_FILE_TYPE` | 415 | File type not supported |\n| `INTERNAL_SERVER_ERROR` | 500 | Unexpected server error |\n| `SERVICE_UNAVAILABLE` | 503 | Service temporarily unavailable |\n\n---\n\n## 13. SDK Examples\n\n### 13.1 JavaScript/Node.js SDK Example\n```javascript\nconst FeedbackPlatformAPI = require('@feedbackplatform/api-client');\n\nconst client = new FeedbackPlatformAPI({\n  apiKey: 'your_api_key_here',\n  baseURL: 'https://api.feedbackplatform.com/v1'\n});\n\n// Submit feedback\nconst response = await client.feedback.submit({\n  qr_code_id: 'qr_code_uuid',\n  customer_name: 'John Doe',\n  overall_rating: 5,\n  feedback_text: 'Great service!'\n});\n\n// Get analytics\nconst analytics = await client.analytics.getDashboard({\n  period: '30d',\n  location_id: 'location_uuid'\n});\n```\n\n### 13.2 Python SDK Example\n```python\nfrom feedbackplatform import FeedbackPlatformClient\n\nclient = FeedbackPlatformClient(\n    api_key='your_api_key_here',\n    base_url='https://api.feedbackplatform.com/v1'\n)\n\n# Submit feedback\nresponse = client.feedback.submit({\n    'qr_code_id': 'qr_code_uuid',\n    'customer_name': 'John Doe',\n    'overall_rating': 5,\n    'feedback_text': 'Great service!'\n})\n\n# Get analytics\nanalytics = client.analytics.get_dashboard(\n    period='30d',\n    location_id='location_uuid'\n)\n```\n\nThis comprehensive API documentation provides your development team with detailed specifications for implementing all API endpoints, including authentication, data models, error handling, and integration examples.","size_bytes":22301},"attached_assets/comprehensive_brd_1754199661057.md":{"content":"# Business Requirements Document (BRD)\n## Multi-Industry Feedback Management SaaS Platform\n\n### Document Information\n- **Version:** 1.0\n- **Date:** August 2025\n- **Document Type:** Business Requirements Document\n- **Project:** Multi-Industry Feedback Management Platform\n\n---\n\n## 1. Executive Summary\n\n### 1.1 Project Overview\nThe Multi-Industry Feedback Management Platform is a scalable SaaS application designed to serve multiple customers across various industries. The platform enables businesses to collect real-time customer feedback through QR codes, manage service recovery processes, and improve customer satisfaction levels through a multi-tenant architecture.\n\n### 1.2 Business Objectives\n- Create a scalable SaaS solution for multiple industries\n- Enable real-time customer feedback collection via QR codes\n- Provide customizable survey templates for different business needs\n- Implement automated alerts and notification systems\n- Support voice and picture feedback capabilities\n- Integrate with public review platforms\n- Deliver comprehensive analytics and reporting\n\n### 1.3 Success Criteria\n- Platform supports minimum 1000+ concurrent users\n- Survey completion rate above 70%\n- Real-time alert delivery within 30 seconds\n- 99.9% uptime availability\n- Mobile-responsive design with cross-browser compatibility\n\n---\n\n## 2. Stakeholders\n\n### 2.1 Primary Stakeholders\n- **Business Owners:** End customers using the platform\n- **Customers:** End users providing feedback\n- **Platform Administrators:** System administrators\n- **Development Team:** Technical implementation team\n\n### 2.2 Secondary Stakeholders\n- **Customer Support Teams:** Business customer support staff\n- **Branch Managers:** Location-specific management\n- **Marketing Teams:** Review and feedback analysis teams\n\n---\n\n## 3. Functional Requirements\n\n### 3.1 User Management & Multi-Tenancy\n\n#### 3.1.1 Business Registration\n- **FR-001:** System shall allow new businesses to register with company details\n- **FR-002:** Each business shall have isolated data environment (tenant isolation)\n- **FR-003:** System shall support multiple user roles per business (Admin, Manager, Staff)\n- **FR-004:** User authentication via email/password with optional 2FA\n\n#### 3.1.2 Industry Selection\n- **FR-005:** System shall provide predefined industry templates for:\n  - Restaurant\n  - Garments\n  - Hospital\n  - Industrial Safety Products\n  - Building Materials\n  - Consumables\n  - Fashion Products\n- **FR-006:** System shall allow custom industry creation for new business types\n\n### 3.2 Survey Creation & Management\n\n#### 3.2.1 Dynamic Field Management\n- **FR-007:** Businesses shall create custom fields through drag-and-drop interface\n- **FR-008:** Supported field types: Text, Number, Dropdown, Date, File Upload, Rating Scale\n- **FR-009:** Custom fields shall be tenant-specific with no cross-tenant data access\n- **FR-010:** System shall validate field requirements (required/optional)\n- **FR-011:** Real-time preview of survey with custom fields before publishing\n\n#### 3.2.2 Survey Template System\n- **FR-012:** Pre-built templates for each supported industry\n- **FR-013:** Template modification capabilities (add/remove/reorder fields)\n- **FR-014:** Template versioning for tracking changes\n- **FR-015:** Template sharing within business locations/branches\n\n### 3.3 QR Code System\n\n#### 3.3.1 QR Code Generation\n- **FR-016:** Automated QR code generation per business location\n- **FR-017:** QR codes shall encode: Company Name, Branch/Location, Table/Bed Number (optional)\n- **FR-018:** Customizable QR code parameters per business needs\n- **FR-019:** QR code regeneration capability for security purposes\n- **FR-020:** Bulk QR code generation for multiple locations/tables\n\n#### 3.3.2 QR Code Data Capture\n- **FR-021:** QR code metadata automatically populated in feedback forms\n- **FR-022:** Location and context data stored with each response\n- **FR-023:** QR code analytics (scan rates, completion rates)\n\n### 3.4 Customer Feedback Collection\n\n#### 3.4.1 Mobile-Optimized Forms\n- **FR-024:** Mobile-responsive feedback forms accessible via QR code\n- **FR-025:** Progressive form completion with save/resume capability\n- **FR-026:** Offline form completion with sync when online\n- **FR-027:** Multi-language support for customer interfaces\n\n#### 3.4.2 Multimedia Feedback\n- **FR-028:** Voice feedback recording up to 2 minutes via mobile browser\n- **FR-029:** Picture upload capability (max 20MB per image)\n- **FR-030:** Audio/visual feedback preview before submission\n- **FR-031:** Multimedia compression for optimal storage\n\n#### 3.4.3 Industry-Specific Data Collection\n- **FR-032:** Restaurant: Customer Name, Contact, Branch, Table Number, Order Number\n- **FR-033:** Garments: Customer Name, Contact, Store Location, Product Code, Size\n- **FR-034:** Hospital: Patient Name, Contact, Ward/Bed Number, Doctor Name\n- **FR-035:** Industrial Safety: Customer Name, Company, Contact, Product Serial Number\n- **FR-036:** Building Materials: Customer Name, Contact, Project ID, Location\n- **FR-037:** Consumables: Customer Name, Contact, Order Number\n- **FR-038:** Fashion: Customer Name, Product ID, Store Location, Contact\n\n### 3.5 Real-Time Alerts & Notifications\n\n#### 3.5.1 Alert Configuration\n- **FR-039:** Businesses define custom alert triggers (rating thresholds, keywords)\n- **FR-040:** Multiple notification channels: SMS, Email, Push Notifications\n- **FR-041:** Role-based alert routing (managers, support staff)\n- **FR-042:** Alert escalation rules for unaddressed issues\n\n#### 3.5.2 Notification Delivery\n- **FR-043:** Real-time alert delivery within 30 seconds\n- **FR-044:** Delivery confirmation and retry mechanisms\n- **FR-045:** Alert acknowledgment tracking\n\n### 3.6 Public Review Integration\n\n#### 3.6.1 API Integrations\n- **FR-046:** Integration with Google Reviews API\n- **FR-047:** Integration with Yelp API\n- **FR-048:** Integration with TripAdvisor API\n- **FR-049:** Configurable review platform selection per business\n- **FR-050:** Automated review monitoring and import\n\n#### 3.6.2 Review Management\n- **FR-051:** Unified dashboard for internal and external reviews\n- **FR-052:** Review response management through platform\n- **FR-053:** Review sentiment analysis and categorization\n\n### 3.7 Analytics & Reporting\n\n#### 3.7.1 Dashboard & Analytics\n- **FR-054:** Real-time analytics dashboard with key metrics\n- **FR-055:** Feedback trend analysis over time periods\n- **FR-056:** Location-based performance comparisons\n- **FR-057:** Customer satisfaction scoring and tracking\n\n#### 3.7.2 Report Generation\n- **FR-058:** Standard report templates for each industry\n- **FR-059:** Export capabilities: PDF, CSV, Excel formats\n- **FR-060:** Scheduled report generation and email delivery\n- **FR-061:** Custom date range filtering for reports\n\n### 3.8 Data Management\n\n#### 3.8.1 Data Storage (Backblaze Integration)\n- **FR-062:** Integration with Backblaze B2 Cloud Storage for multimedia files\n- **FR-063:** Automated backup of voice and image files to Backblaze\n- **FR-064:** CDN integration for fast multimedia delivery\n- **FR-065:** File lifecycle management and archival policies\n\n#### 3.8.2 Data Security & Privacy\n- **FR-066:** End-to-end encryption for sensitive customer data\n- **FR-067:** GDPR compliance with data deletion capabilities\n- **FR-068:** CCPA compliance with data export features\n- **FR-069:** Audit logging for all data access and modifications\n\n---\n\n## 4. Non-Functional Requirements\n\n### 4.1 Performance Requirements\n- **NFR-001:** Page load time under 3 seconds\n- **NFR-002:** Support 1000+ concurrent users per tenant\n- **NFR-003:** 99.9% system availability\n- **NFR-004:** Voice/image upload processing within 10 seconds\n\n### 4.2 Security Requirements\n- **NFR-005:** SSL/TLS encryption for all data transmission\n- **NFR-006:** Role-based access control (RBAC)\n- **NFR-007:** Regular security audits and penetration testing\n- **NFR-008:** Data retention policies compliance\n\n### 4.3 Scalability Requirements\n- **NFR-009:** Horizontal scaling capability for increased load\n- **NFR-010:** Multi-tenant database architecture\n- **NFR-011:** Auto-scaling based on usage patterns\n- **NFR-012:** Load balancing across multiple servers\n\n### 4.4 Usability Requirements\n- **NFR-013:** Mobile-first responsive design\n- **NFR-014:** Cross-browser compatibility (Chrome, Safari, Firefox, Edge)\n- **NFR-015:** Accessibility compliance (WCAG 2.1 Level AA)\n- **NFR-016:** Intuitive user interface with minimal training required\n\n### 4.5 Integration Requirements\n- **NFR-017:** RESTful API design for third-party integrations\n- **NFR-018:** Webhook support for real-time data synchronization\n- **NFR-019:** Rate limiting for API calls\n- **NFR-020:** API versioning strategy\n\n---\n\n## 5. Technical Constraints\n\n### 5.1 Technology Stack\n- Cloud storage must use Backblaze B2\n- Mobile browser compatibility required\n- No native mobile app development initially\n- Multi-tenant database architecture mandatory\n\n### 5.2 Compliance Requirements\n- GDPR compliance for European customers\n- CCPA compliance for California customers\n- Industry-specific regulations (HIPAA for hospitals)\n- Data residency requirements based on customer location\n\n---\n\n## 6. Assumptions & Dependencies\n\n### 6.1 Assumptions\n- Customers have smartphones with camera and microphone capabilities\n- Stable internet connectivity for real-time features\n- Businesses will provide training to staff for platform usage\n- Third-party API availability and reliability\n\n### 6.2 Dependencies\n- Backblaze B2 service availability and API stability\n- Third-party review platform API access and rate limits\n- SMS and email service providers for notifications\n- Payment gateway integration for subscription billing\n\n---\n\n## 7. Risk Assessment\n\n### 7.1 Technical Risks\n- **High:** Multi-tenant data isolation failures\n- **Medium:** Third-party API rate limiting or changes\n- **Medium:** Backblaze service interruptions\n- **Low:** Browser compatibility issues\n\n### 7.2 Business Risks\n- **High:** Customer data privacy breaches\n- **Medium:** Scalability challenges with rapid growth\n- **Medium:** Competition from established feedback platforms\n- **Low:** Regulatory changes affecting compliance requirements\n\n---\n\n## 8. Success Metrics\n\n### 8.1 Technical Metrics\n- System uptime: 99.9%\n- Response time: <3 seconds\n- Data processing accuracy: 99.95%\n- Zero data breach incidents\n\n### 8.2 Business Metrics\n- Customer satisfaction score: >4.5/5\n- Survey completion rate: >70%\n- Platform adoption rate: >80% of registered businesses actively using\n- Customer retention rate: >90% annually\n\n---\n\n## 9. Acceptance Criteria\n\n### 9.1 Functional Acceptance\n- All functional requirements implemented and tested\n- User acceptance testing completed successfully\n- Integration testing with all third-party services verified\n- Multi-tenant isolation verified through security testing\n\n### 9.2 Performance Acceptance\n- Load testing confirms system handles specified concurrent users\n- Security testing confirms no critical vulnerabilities\n- Accessibility testing confirms WCAG 2.1 Level AA compliance\n- Cross-browser testing confirms compatibility across target browsers\n\n---\n\n## 10. Appendices\n\n### 10.1 Glossary\n- **Multi-tenant:** Single instance of software serving multiple customers\n- **QR Code:** Quick Response code for fast information access\n- **SaaS:** Software as a Service delivery model\n- **API:** Application Programming Interface\n- **GDPR:** General Data Protection Regulation\n- **CCPA:** California Consumer Privacy Act\n\n### 10.2 References\n- Industry-specific compliance requirements documentation\n- Third-party API documentation (Google, Yelp, TripAdvisor)\n- Backblaze B2 Cloud Storage documentation\n- Security and privacy regulation guidelines","size_bytes":11806},"attached_assets/system_architecture_1754199661058.md":{"content":"# System Architecture Document\n## Multi-Industry Feedback Management SaaS Platform\n\n### Document Information\n- **Version:** 1.0\n- **Date:** August 2025\n- **Document Type:** System Architecture Document\n- **Project:** Multi-Industry Feedback Management Platform\n\n---\n\n## 1. Architecture Overview\n\n### 1.1 High-Level System Architecture\n\n```\n┌─────────────────────────────────────────────────────────────────────────────────┐\n│                              PRESENTATION LAYER                                │\n├─────────────────────────────────────────────────────────────────────────────────┤\n│  ┌─────────────────┐  ┌─────────────────┐  ┌─────────────────┐                │\n│  │   Customer      │  │   Business      │  │   Admin         │                │\n│  │   Mobile Web    │  │   Dashboard     │  │   Portal        │                │\n│  │   (PWA)         │  │   (SPA)         │  │   (Web App)     │                │\n│  └─────────────────┘  └─────────────────┘  └─────────────────┘                │\n└─────────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────────┐\n│                                API GATEWAY                                     │\n├─────────────────────────────────────────────────────────────────────────────────┤\n│  • Authentication & Authorization    • Rate Limiting                           │\n│  • Request Routing                   • API Versioning                          │\n│  • SSL Termination                   • Request/Response Logging                │\n└─────────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────────┐\n│                              LOAD BALANCER                                     │\n├─────────────────────────────────────────────────────────────────────────────────┤\n│  • Traffic Distribution              • Health Checks                           │\n│  • Session Affinity                  • Failover Management                     │\n└─────────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────────┐\n│                             APPLICATION LAYER                                  │\n├─────────────────────────────────────────────────────────────────────────────────┤\n│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐                │\n│ │   Auth      │ │  Feedback   │ │  Analytics  │ │ Notification│                │\n│ │  Service    │ │  Service    │ │  Service    │ │   Service   │                │\n│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘                │\n│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐                │\n│ │   QR Code   │ │   Report    │ │   File      │ │  Integration│                │\n│ │  Service    │ │  Service    │ │  Service    │ │   Service   │                │\n│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘                │\n└─────────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────────┐\n│                               DATA LAYER                                       │\n├─────────────────────────────────────────────────────────────────────────────────┤\n│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐                │\n│ │ PostgreSQL  │ │    Redis    │ │ Backblaze   │ │ Message     │                │\n│ │ (Primary)   │ │   Cache     │ │    B2       │ │   Queue     │                │\n│ │             │ │             │ │ (Files)     │ │  (Redis)    │                │\n│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘                │\n└─────────────────────────────────────────────────────────────────────────────────┘\n                                      │\n                                      ▼\n┌─────────────────────────────────────────────────────────────────────────────────┐\n│                           EXTERNAL INTEGRATIONS                                │\n├─────────────────────────────────────────────────────────────────────────────────┤\n│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐                │\n│ │   Google    │ │    Yelp     │ │ TripAdvisor │ │   Twilio    │                │\n│ │  Reviews    │ │     API     │ │     API     │ │   (SMS)     │                │\n│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘                │\n│ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐ ┌─────────────┐                │\n│ │  SendGrid   │ │   Stripe    │ │ Monitoring  │ │   CDN       │                │\n│ │  (Email)    │ │ (Payment)   │ │  Services   │ │  Service    │                │\n│ └─────────────┘ └─────────────┘ └─────────────┘ └─────────────┘                │\n└─────────────────────────────────────────────────────────────────────────────────┘\n```\n\n### 1.2 Microservices Architecture\n\nThe system follows a microservices architecture pattern with the following core services:\n\n#### Core Services\n1. **Authentication Service** - User management, JWT tokens, RBAC\n2. **Tenant Management Service** - Multi-tenant operations, billing\n3. **Survey Service** - Template management, custom fields\n4. **Feedback Collection Service** - Response handling, validation\n5. **QR Code Service** - Generation, tracking, analytics\n6. **File Management Service** - Backblaze B2 integration\n7. **Analytics Service** - Data processing, metrics calculation\n8. **Notification Service** - Alerts, emails, SMS\n9. **Reporting Service** - Report generation, exports\n10. **Integration Service** - Third-party API management\n\n---\n\n## 2. Component Details\n\n### 2.1 Frontend Architecture\n\n#### Customer Mobile Interface (PWA)\n```javascript\n// Progressive Web App Architecture\nconst PWAArchitecture = {\n  framework: \"Vue.js 3 / React 18\",\n  stateManagement: \"Vuex/Pinia / Redux Toolkit\",\n  routing: \"Vue Router / React Router\",\n  ui: \"Tailwind CSS + Custom Components\",\n  features: {\n    offline: \"Service Worker + IndexedDB\",\n    camera: \"MediaDevices API\",\n    audio: \"MediaRecorder API\",\n    geolocation: \"Geolocation API\",\n    push: \"Web Push API\",\n    storage: \"Local Storage + Session Storage\"\n  },\n  performance: {\n    bundling: \"Vite / Webpack\",\n    codesplitting: \"Route-based splitting\",\n    caching: \"Service Worker caching strategy\",\n    compression: \"Gzip + Brotli\"\n  }\n};\n```\n\n#### Business Dashboard (SPA)\n```javascript\n// Single Page Application Architecture\nconst DashboardArchitecture = {\n  framework: \"Vue.js 3 with TypeScript\",\n  components: {\n    charts: \"Chart.js / D3.js\",\n    tables: \"Vue Good Table / AG Grid\",\n    forms: \"Vuelidate / VeeValidate\",\n    notifications: \"Vue Toastification\"\n  },\n  realtime: {\n    websockets: \"Socket.io client\",\n    polling: \"Axios with intervals\",\n    updates: \"EventSource (SSE)\"\n  },\n  security: {\n    authentication: \"JWT tokens\",\n    authorization: \"Route guards\",\n    xss: \"DOMPurify sanitization\"\n  }\n};\n```\n\n### 2.2 API Gateway Architecture\n\n```javascript\n// API Gateway Configuration\nconst APIGatewayConfig = {\n  technology: \"Kong / AWS API Gateway / Custom Express.js\",\n  features: {\n    authentication: {\n      jwt: \"JWT token validation\",\n      oauth: \"OAuth 2.0 / OpenID Connect\",\n      apiKeys: \"API key management\"\n    },\n    rateLimit: {\n      tenant: \"Per-tenant rate limiting\",\n      endpoint: \"Per-endpoint limits\",\n      user: \"Per-user limits\",\n      global: \"Global rate limiting\"\n    },\n    routing: {\n      versioning: \"URL-based versioning (/v1, /v2)\",\n      loadBalancing: \"Round-robin, least-connections\",\n      healthChecks: \"Service health monitoring\"\n    },\n    monitoring: {\n      logging: \"Request/response logging\",\n      metrics: \"Prometheus metrics\",\n      tracing: \"Distributed tracing\"\n    }\n  }\n};\n```\n\n### 2.3 Microservices Communication\n\n```javascript\n// Service Communication Patterns\nconst CommunicationPatterns = {\n  synchronous: {\n    protocol: \"HTTP/HTTPS REST APIs\",\n    format: \"JSON\",\n    timeout: \"30 seconds max\",\n    retries: \"Exponential backoff\"\n  },\n  asynchronous: {\n    messageQueue: \"Redis Bull Queue\",\n    events: \"Event-driven architecture\",\n    patterns: [\"Publish/Subscribe\", \"Request/Reply\", \"Fire and Forget\"]\n  },\n  serviceDiscovery: {\n    method: \"DNS-based / Consul\",\n    healthChecks: \"HTTP health endpoints\",\n    loadBalancing: \"Client-side load balancing\"\n  }\n};\n```\n\n---\n\n## 3. Data Architecture\n\n### 3.1 Multi-Tenant Database Strategy\n\n```sql\n-- Multi-tenant isolation strategy\nCREATE SCHEMA tenant_isolation;\n\n-- Row Level Security (RLS) implementation\nCREATE OR REPLACE FUNCTION get_current_tenant_id()\nRETURNS UUID AS $\nBEGIN\n  RETURN current_setting('app.current_tenant_id', true)::UUID;\nEND;\n$ LANGUAGE plpgsql SECURITY DEFINER;\n\n-- Tenant isolation policy\nCREATE POLICY tenant_isolation ON feedback_responses\n  FOR ALL TO application_role\n  USING (tenant_id = get_current_tenant_id());\n\n-- Connection pooling with tenant context\nconst TenantConnectionPool = {\n  strategy: \"Single pool with tenant context\",\n  implementation: {\n    beforeQuery: \"SET app.current_tenant_id = $1\",\n    afterQuery: \"RESET app.current_tenant_id\",\n    poolSize: \"5-20 connections per instance\"\n  }\n};\n```\n\n### 3.2 Data Partitioning Strategy\n\n```sql\n-- Horizontal partitioning for large tables\nCREATE TABLE feedback_responses (\n    response_id UUID DEFAULT gen_random_uuid(),\n    tenant_id UUID NOT NULL,\n    submitted_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,\n    -- other columns\n    PRIMARY KEY (response_id, submitted_at)\n) PARTITION BY RANGE (submitted_at);\n\n-- Automated partition creation\nCREATE OR REPLACE FUNCTION create_monthly_partition()\nRETURNS void AS $\nDECLARE\n    start_date date;\n    end_date date;\n    partition_name text;\nBEGIN\n    start_date := date_trunc('month', CURRENT_DATE);\n    end_date := start_date + interval '1 month';\n    partition_name := 'feedback_responses_' || to_char(start_date, 'YYYY_MM');\n    \n    EXECUTE format('CREATE TABLE IF NOT EXISTS %I PARTITION OF feedback_responses\n                   FOR VALUES FROM (%L) TO (%L)',\n                   partition_name, start_date, end_date);\nEND;\n$ LANGUAGE plpgsql;\n\n-- Schedule partition creation\nSELECT cron.schedule('create-partitions', '0 0 25 * *', 'SELECT create_monthly_partition();');\n```\n\n### 3.3 Caching Architecture\n\n```javascript\n// Multi-layer caching strategy\nconst CachingLayers = {\n  l1_application: {\n    type: \"In-memory (Node.js)\",\n    ttl: \"5-60 seconds\",\n    data: [\"Active sessions\", \"Frequently accessed configs\"]\n  },\n  l2_distributed: {\n    type: \"Redis Cluster\",\n    ttl: \"1 minute - 24 hours\",\n    data: [\"User sessions\", \"Analytics data\", \"API responses\"]\n  },\n  l3_cdn: {\n    type: \"CloudFlare / AWS CloudFront\",\n    ttl: \"1 hour - 30 days\",\n    data: [\"Static assets\", \"Public content\", \"Generated reports\"]\n  },\n  cacheInvalidation: {\n    strategy: \"Event-driven invalidation\",\n    patterns: [\"Cache-aside\", \"Write-through\", \"Write-behind\"]\n  }\n};\n\n// Redis caching implementation\nclass CacheManager {\n  static async get(key, fallback) {\n    try {\n      const cached = await redis.get(key);\n      if (cached) return JSON.parse(cached);\n      \n      const fresh = await fallback();\n      await this.set(key, fresh, 3600); // 1 hour TTL\n      return fresh;\n    } catch (error) {\n      console.error('Cache error:', error);\n      return await fallback();\n    }\n  }\n  \n  static async set(key, value, ttl = 3600) {\n    try {\n      await redis.setex(key, ttl, JSON.stringify(value));\n    } catch (error) {\n      console.error('Cache set error:', error);\n    }\n  }\n  \n  static async invalidatePattern(pattern) {\n    const keys = await redis.keys(pattern);\n    if (keys.length > 0) {\n      await redis.del(...keys);\n    }\n  }\n}\n```\n\n---\n\n## 4. Backblaze B2 Integration Architecture\n\n### 4.1 File Storage Strategy\n\n```javascript\n// Backblaze B2 Service Architecture\nclass BackblazeB2Service {\n  constructor() {\n    this.bucketStructure = {\n      root: \"feedback-platform-prod\",\n      structure: {\n        tenants: \"{tenant_id}\",\n        files: {\n          voice: \"voice/{year}/{month}/\",\n          images: \"images/{year}/{month}/\",\n          reports: \"reports/{year}/{month}/\",\n          exports: \"exports/{type}/\"\n        }\n      }\n    };\n  }\n  \n  generateFilePath(tenantId, fileType, filename) {\n    const now = new Date();\n    const year = now.getFullYear();\n    const month = String(now.getMonth() + 1).padStart(2, '0');\n    \n    return `tenants/${tenantId}/${fileType}/${year}/${month}/${Date.now()}_${filename}`;\n  }\n  \n  async uploadFile(file, tenantId, fileType) {\n    // 1. Validate file\n    this.validateFile(file, fileType);\n    \n    // 2. Generate unique path\n    const filePath = this.generateFilePath(tenantId, fileType, file.name);\n    \n    // 3. Get upload authorization\n    const uploadAuth = await this.getUploadAuthorization();\n    \n    // 4. Upload to B2\n    const uploadResult = await this.directUpload(file, filePath, uploadAuth);\n    \n    // 5. Store metadata in database\n    const metadata = await this.storeFileMetadata({\n      filePath,\n      tenantId,\n      fileType,\n      size: file.size,\n      mimeType: file.type,\n      backblazeFileId: uploadResult.fileId,\n      backblazeUrl: uploadResult.downloadUrl\n    });\n    \n    return metadata;\n  }\n  \n  validateFile(file, fileType) {\n    const limits = {\n      voice: { maxSize: 10 * 1024 * 1024, types: ['audio/mpeg', 'audio/wav'] }, // 10MB\n      image: { maxSize: 20 * 1024 * 1024, types: ['image/jpeg', 'image/png'] }  // 20MB\n    };\n    \n    const limit = limits[fileType];\n    if (!limit) throw new Error('Invalid file type');\n    if (file.size > limit.maxSize) throw new Error('File too large');\n    if (!limit.types.includes(file.type)) throw new Error('Invalid MIME type');\n  }\n}\n```\n\n### 4.2 CDN Integration\n\n```javascript\n// CDN Configuration for B2\nconst CDNConfig = {\n  provider: \"CloudFlare\",\n  configuration: {\n    origin: \"s3.us-west-004.backblazeb2.com\",\n    caching: {\n      images: \"30 days\",\n      voice: \"7 days\",\n      reports: \"1 day\"\n    },\n    compression: \"Auto (Gzip/Brotli)\",\n    security: {\n      hotlinkProtection: true,\n      accessControl: \"Signed URLs for sensitive content\"\n    }\n  },\n  \n  // Generate signed URLs for secure access\n  generateSignedUrl(filePath, expirationMinutes = 60) {\n    const expiration = Date.now() + (expirationMinutes * 60 * 1000);\n    const signature = crypto\n      .createHmac('sha256', process.env.CDN_SECRET)\n      .update(`${filePath}${expiration}`)\n      .digest('hex');\n    \n    return `https://cdn.feedbackplatform.com/${filePath}?expires=${expiration}&signature=${signature}`;\n  }\n};\n```\n\n---\n\n## 5. Security Architecture\n\n### 5.1 Authentication & Authorization\n\n```javascript\n// JWT-based Authentication Architecture\nconst AuthArchitecture = {\n  tokenStrategy: {\n    accessToken: {\n      lifespan: \"15 minutes\",\n      storage: \"Memory (httpOnly cookie preferred)\",\n      payload: [\"user_id\", \"tenant_id\", \"role\", \"permissions\"]\n    },\n    refreshToken: {\n      lifespan: \"7 days\",\n      storage: \"httpOnly secure cookie\",\n      rotation: \"On each refresh\"\n    }\n  },\n  \n  authorization: {\n    model: \"RBAC (Role-Based Access Control)\",\n    permissions: {\n      granularity: \"Resource and action level\",\n      inheritance: \"Role-based permission inheritance\",\n      evaluation: \"Real-time permission checking\"\n    }\n  },\n  \n  multiTenant: {\n    isolation: \"Tenant ID in all JWT tokens\",\n    validation: \"Every request validates tenant access\",\n    crossTenant: \"Strictly prohibited\"\n  }\n};\n\n// Permission system implementation\nclass PermissionSystem {\n  static roles = {\n    admin: [\n      'tenant:manage', 'user:create', 'user:delete', 'survey:manage',\n      'feedback:read', 'feedback:delete', 'analytics:view', 'billing:manage'\n    ],\n    manager: [\n      'survey:manage', 'feedback:read', 'feedback:respond', \n      'analytics:view', 'location:manage', 'alert:manage'\n    ],\n    staff: [\n      'feedback:read', 'feedback:respond', 'survey:view'\n    ]\n  };\n  \n  static checkPermission(userRole, permission) {\n    return this.roles[userRole]?.includes(permission) || false;\n  }\n  \n  static middleware(requiredPermission) {\n    return (req, res, next) => {\n      if (!this.checkPermission(req.user.role, requiredPermission)) {\n        return res.status(403).json({ error: 'Insufficient permissions' });\n      }\n      next();\n    };\n  }\n}\n```\n\n### 5.2 Data Encryption\n\n```javascript\n// Encryption Architecture\nconst EncryptionStrategy = {\n  atRest: {\n    database: \"PostgreSQL TDE (Transparent Data Encryption)\",\n    files: \"AES-256 encryption before B2 upload\",\n    backups: \"Encrypted backup files\"\n  },\n  inTransit: {\n    api: \"TLS 1.3 for all API communication\",\n    internal: \"mTLS for service-to-service\",\n    files: \"HTTPS for all file transfers\"\n  },\n  application: {\n    pii: \"AES-256 field-level encryption\",\n    passwords: \"bcrypt with salt rounds 12\",\n    tokens: \"HMAC-SHA256 signing\"\n  }\n};\n\n// Field-level encryption service\nclass FieldEncryption {\n  static encrypt(plaintext) {\n    const cipher = crypto.createCipher('aes-256-gcm', process.env.ENCRYPTION_KEY);\n    let encrypted = cipher.update(plaintext, 'utf8', 'hex');\n    encrypted += cipher.final('hex');\n    const authTag = cipher.getAuthTag();\n    return `${encrypted}:${authTag.toString('hex')}`;\n  }\n  \n  static decrypt(ciphertext) {\n    const [encrypted, authTag] = ciphertext.split(':');\n    const decipher = crypto.createDecipher('aes-256-gcm', process.env.ENCRYPTION_KEY);\n    decipher.setAuthTag(Buffer.from(authTag, 'hex'));\n    let decrypted = decipher.update(encrypted, 'hex', 'utf8');\n    decrypted += decipher.final('utf8');\n    return decrypted;\n  }\n}\n```\n\n---\n\n## 6. Scalability Architecture\n\n### 6.1 Horizontal Scaling Strategy\n\n```yaml\n# Kubernetes Auto-scaling Configuration\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: feedback-platform-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: feedback-platform-api\n  minReplicas: 3\n  maxReplicas: 50\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n  - type: Pods\n    pods:\n      metric:\n        name: http_requests_per_second\n      target:\n        type: AverageValue\n        averageValue: \"100\"\n\n---\n# Vertical Pod Autoscaler\napiVersion: autoscaling.k8s.io/v1\nkind: VerticalPodAutoscaler\nmetadata:\n  name: feedback-platform-vpa\nspec:\n  targetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: feedback-platform-api\n  updatePolicy:\n    updateMode: \"Auto\"\n  resourcePolicy:\n    containerPolicies:\n    - containerName: api\n      maxAllowed:\n        cpu: 2\n        memory: 4Gi\n      minAllowed:\n        cpu: 100m\n        memory: 128Mi\n```\n\n### 6.2 Database Scaling\n\n```javascript\n// Database scaling architecture\nconst DatabaseScaling = {\n  readReplicas: {\n    count: \"2-5 read replicas\",\n    loadBalancing: \"Round-robin for read queries\",\n    replicationLag: \"< 100ms acceptable lag\",\n    failover: \"Automatic promotion on master failure\"\n  },\n  \n  sharding: {\n    strategy: \"Shard by tenant_id for future scaling\",\n    implementation: \"Application-level sharding\",\n    resharding: \"Automated shard rebalancing\"\n  },\n  \n  connectionPooling: {\n    pooler: \"PgBouncer\",\n    maxConnections: \"100 per pool\",\n    pooling: \"Transaction-level pooling\"\n  }\n};\n\n// Database connection manager\nclass DatabaseManager {\n  constructor() {\n    this.masterPool = new Pool({ ...masterConfig, max: 20 });\n    this.replicaPools = replicas.map(config => \n      new Pool({ ...config, max: 20 })\n    );\n  }\n  \n  async query(sql, params, options = {}) {\n    const isReadQuery = sql.trim().toLowerCase().startsWith('select');\n    const pool = (isReadQuery && !options.forceMaster) \n      ? this.getReadPool() \n      : this.masterPool;\n    \n    return await pool.query(sql, params);\n  }\n  \n  getReadPool() {\n    // Simple round-robin load balancing\n    const index = Math.floor(Math.random() * this.replicaPools.length);\n    return this.replicaPools[index];\n  }\n}\n```\n\n### 6.3 Caching Scaling\n\n```javascript\n// Redis Cluster Configuration\nconst RedisClusterConfig = {\n  topology: {\n    nodes: 6, // 3 masters, 3 slaves\n    replication: \"Master-slave replication\",\n    sharding: \"Automatic key distribution\"\n  },\n  \n  scaling: {\n    horizontal: \"Add nodes to cluster\",\n    resharding: \"Automatic slot rebalancing\",\n    failover: \"Automatic master election\"\n  },\n  \n  performance: {\n    memory: \"8GB per node\",\n    persistence: \"RDB + AOF for durability\",\n    eviction: \"allkeys-lru policy\"\n  }\n};\n\n// Cache client with cluster support\nclass CacheCluster {\n  constructor() {\n    this.cluster = new Redis.Cluster([\n      { host: 'redis-1', port: 6379 },\n      { host: 'redis-2', port: 6379 },\n      { host: 'redis-3', port: 6379 }\n    ], {\n      redisOptions: {\n        password: process.env.REDIS_PASSWORD\n      },\n      retryDelayOnFailover: 100,\n      maxRetriesPerRequest: 3\n    });\n  }\n  \n  async get(key) {\n    return await this.cluster.get(key);\n  }\n  \n  async setWithTTL(key, value, ttl) {\n    return await this.cluster.setex(key, ttl, value);\n  }\n  \n  async invalidatePattern(pattern) {\n    const stream = this.cluster.scanStream({\n      match: pattern,\n      count: 100\n    });\n    \n    const pipeline = this.cluster.pipeline();\n    stream.on('data', (keys) => {\n      keys.forEach(key => pipeline.del(key));\n    });\n    \n    stream.on('end', () => {\n      pipeline.exec();\n    });\n  }\n}\n```\n\n---\n\n## 7. Monitoring & Observability\n\n### 7.1 Application Monitoring\n\n```javascript\n// Prometheus metrics collection\nconst prometheus = require('prom-client');\n\n// Custom business metrics\nconst feedbackSubmissions = new prometheus.Counter({\n  name: 'feedback_submissions_total',\n  help: 'Total number of feedback submissions',\n  labelNames: ['tenant_id', 'industry', 'rating']\n});\n\nconst responseTime = new prometheus.Histogram({\n  name: 'http_request_duration_seconds',\n  help: 'HTTP request duration in seconds',\n  labelNames: ['method', 'route', 'status_code', 'tenant_id'],\n  buckets: [0.1, 0.5, 1, 2, 5, 10]\n});\n\nconst activeUsers = new prometheus.Gauge({\n  name: 'active_users_current',\n  help: 'Current number of active users',\n  labelNames: ['tenant_id']\n});\n\n// Metrics middleware\nconst metricsMiddleware = (req, res, next) => {\n  const start = Date.now();\n  \n  res.on('finish', () => {\n    const duration = (Date.now() - start) / 1000;\n    responseTime\n      .labels(req.method, req.route?.path || 'unknown', res.statusCode, req.user?.tenant_id || 'anonymous')\n      .observe(duration);\n  });\n  \n  next();\n};\n```\n\n### 7.2 Distributed Tracing\n\n```javascript\n// OpenTelemetry tracing setup\nconst { NodeTracerProvider } = require('@opentelemetry/sdk-node');\nconst { Resource } = require('@opentelemetry/resources');\nconst { SemanticResourceAttributes } = require('@opentelemetry/semantic-conventions');\n\nconst provider = new NodeTracerProvider({\n  resource: new Resource({\n    [SemanticResourceAttributes.SERVICE_NAME]: 'feedback-platform',\n    [SemanticResourceAttributes.SERVICE_VERSION]: process.env.APP_VERSION,\n  }),\n});\n\n// Trace feedback submission flow\nclass TracingService {\n  static async traceFeedbackSubmission(req, res, next) {\n    const tracer = opentelemetry.trace.getTracer('feedback-service');\n    \n    const span = tracer.startSpan('feedback_submission', {\n      attributes: {\n        'tenant.id': req.user?.tenant_id,\n        'feedback.rating': req.body.overall_rating,\n        'user.id': req.user?.user_id\n      }\n    });\n    \n    try {\n      res.locals.span = span;\n      await next();\n      span.setStatus({ code: opentelemetry.SpanStatusCode.OK });\n    } catch (error) {\n      span.setStatus({ \n        code: opentelemetry.SpanStatusCode.ERROR, \n        message: error.message \n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n}\n```\n\n### 7.3 Health Checks\n\n```javascript\n// Comprehensive health check system\nclass HealthCheckService {\n  static async performHealthCheck() {\n    const checks = await Promise.allSettled([\n      this.checkDatabase(),\n      this.checkRedis(),\n      this.checkBackblaze(),\n      this.checkExternalAPIs(),\n      this.checkDiskSpace(),\n      this.checkMemoryUsage()\n    ]);\n    \n    const results = checks.map((check, index) => ({\n      name: this.checkNames[index],\n      status: check.status === 'fulfilled' ? 'healthy' : 'unhealthy',\n      details: check.status === 'fulfilled' ? check.value : check.reason.message,\n      timestamp: new Date().toISOString()\n    }));\n    \n    const overallHealth = results.every(r => r.status === 'healthy') ? 'healthy' : 'unhealthy';\n    \n    return {\n      status: overallHealth,\n      checks: results,\n      uptime: process.uptime(),\n      memory: process.memoryUsage(),\n      timestamp: new Date().toISOString()\n    };\n  }\n  \n  static checkNames = [\n    'database', 'redis', 'backblaze', 'external_apis', 'disk_space', 'memory'\n  ];\n  \n  static async checkDatabase() {\n    const start = Date.now();\n    await db.query('SELECT 1');\n    return { responseTime: Date.now() - start };\n  }\n  \n  static async checkRedis() {\n    const start = Date.now();\n    await redis.ping();\n    return { responseTime: Date.now() - start };\n  }\n  \n  static async checkBackblaze() {\n    // Check B2 API connectivity\n    const start = Date.now();\n    await b2.listBuckets();\n    return { responseTime: Date.now() - start };\n  }\n}\n```\n\n---\n\n## 8. Disaster Recovery & Backup\n\n### 8.1 Backup Strategy\n\n```javascript\n// Automated backup system\nconst BackupStrategy = {\n  database: {\n    frequency: \"Every 6 hours\",\n    retention: \"30 days hot, 1 year cold storage\",\n    method: \"pg_dump with compression\",\n    encryption: \"AES-256 encryption\",\n    verification: \"Daily restore tests\"\n  },\n  \n  files: {\n    frequency: \"Real-time (B2 versioning)\",\n    retention: \"90 days versions\",\n    crossRegion: \"Automatic cross-region replication\",\n    verification: \"Weekly integrity checks\"\n  },\n  \n  configuration: {\n    frequency: \"On change + daily\",\n    storage: \"Git repository + encrypted backups\",\n    retention: \"Indefinite version history\"\n  }\n};\n\nclass BackupService {\n  static async performDatabaseBackup() {\n    const timestamp = new Date().toISOString().replace(/[:.]/g, '-');\n    const filename = `db-backup-${timestamp}.sql.gz`;\n    \n    // Create database dump\n    const dumpCommand = `pg_dump ${process.env.DATABASE_URL} | gzip > /tmp/${filename}`;\n    await execAsync(dumpCommand);\n    \n    // Encrypt backup\n    const encryptedFile = await this.encryptFile(`/tmp/${filename}`);\n    \n    // Upload to B2\n    const uploadResult = await b2Service.uploadFile(\n      encryptedFile, \n      'system', \n      'backups'\n    );\n    \n    // Store backup metadata\n    await db.query(`\n      INSERT INTO backup_logs (backup_type, filename, size, checksum, created_at)\n      VALUES ('database', $1, $2, $3, CURRENT_TIMESTAMP)\n    `, [filename, uploadResult.size, uploadResult.checksum]);\n    \n    // Cleanup local files\n    await fs.unlink(`/tmp/${filename}`);\n    await fs.unlink(encryptedFile);\n    \n    return uploadResult;\n  }\n  \n  static async verifyBackup(backupId) {\n    // Download backup\n    const backup = await this.downloadBackup(backupId);\n    \n    // Decrypt\n    const decrypted = await this.decryptFile(backup);\n    \n    // Test restore to temporary database\n    const testDb = await this.createTemporaryDatabase();\n    const restoreResult = await this.restoreDatabase(testDb, decrypted);\n    \n    // Verify data integrity\n    const integrityCheck = await this.verifyDataIntegrity(testDb);\n    \n    // Cleanup\n    await this.dropTemporaryDatabase(testDb);\n    \n    return {\n      backupId,\n      verified: restoreResult.success && integrityCheck.passed,\n      details: { restoreResult, integrityCheck }\n    };\n  }\n}\n```\n\n### 8.2 Disaster Recovery Plan\n\n```javascript\n// Disaster Recovery Architecture\nconst DisasterRecoveryPlan = {\n  rto: \"4 hours\", // Recovery Time Objective\n  rpo: \"15 minutes\", // Recovery Point Objective\n  \n  scenarios: {\n    singleNodeFailure: {\n      detection: \"Health checks + monitoring alerts\",\n      response: \"Automatic failover to healthy nodes\",\n      timeline: \"< 5 minutes\"\n    },\n    \n    databaseFailure: {\n      detection: \"Connection failures + replication lag\",\n      response: \"Promote read replica to master\",\n      timeline: \"< 30 minutes\"\n    },\n    \n    regionalOutage: {\n      detection: \"Multi-service failures\",\n      response: \"Failover to backup region\",\n      timeline: \"< 4 hours\"\n    },\n    \n    dataCorruption: {\n      detection: \"Data integrity checks\",\n      response: \"Restore from point-in-time backup\",\n      timeline: \"< 8 hours\"\n    }\n  },\n  \n  automation: {\n    monitoring: \"24/7 automated monitoring\",\n    alerting: \"Immediate alert escalation\",\n    failover: \"Automated for single points of failure\",\n    communication: \"Automated customer notifications\"\n  }\n};\n```\n\nThis comprehensive System Architecture Document provides your development team with detailed technical specifications for implementing a robust, scalable multi-industry feedback management platform with proper Backblaze B2 integration and enterprise-grade architecture patterns.","size_bytes":34618},"attached_assets/technical_requirements_1754199661059.md":{"content":"# Technical Requirements Document (TRD)\n## Multi-Industry Feedback Management SaaS Platform\n\n### Document Information\n- **Version:** 1.0\n- **Date:** August 2025\n- **Document Type:** Technical Requirements Document\n- **Project:** Multi-Industry Feedback Management Platform\n\n---\n\n## 1. System Architecture Overview\n\n### 1.1 High-Level Architecture\n```\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│   Mobile Web    │    │   Admin Web     │    │   Management    │\n│   Interface     │    │   Dashboard     │    │   Portal        │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n         │                       │                       │\n         └───────────────────────┼───────────────────────┘\n                                 │\n                    ┌─────────────────┐\n                    │   API Gateway   │\n                    │  (Rate Limiting │\n                    │  Authentication)│\n                    └─────────────────┘\n                                 │\n                    ┌─────────────────┐\n                    │  Load Balancer  │\n                    └─────────────────┘\n                                 │\n         ┌───────────────────────┼───────────────────────┐\n         │                       │                       │\n┌─────────────────┐    ┌─────────────────┐    ┌─────────────────┐\n│  Web Server 1   │    │  Web Server 2   │    │  Web Server N   │\n│   (Node.js)     │    │   (Node.js)     │    │   (Node.js)     │\n└─────────────────┘    └─────────────────┘    └─────────────────┘\n         │                       │                       │\n         └───────────────────────┼───────────────────────┘\n                                 │\n                    ┌─────────────────┐\n                    │   Database      │\n                    │  (PostgreSQL)   │\n                    │  Multi-Tenant   │\n                    └─────────────────┘\n                                 │\n                    ┌─────────────────┐\n                    │   Backblaze B2  │\n                    │  Cloud Storage  │\n                    │ (Voice/Images)  │\n                    └─────────────────┘\n```\n\n### 1.2 Technology Stack\n\n#### Frontend Technologies\n- **Mobile Web Interface:** Progressive Web App (PWA)\n  - HTML5, CSS3, JavaScript (ES6+)\n  - Responsive framework: Tailwind CSS\n  - JavaScript framework: Vue.js 3 or React 18\n  - PWA features for offline capability\n  - WebRTC for voice recording\n  - File API for image capture\n\n- **Admin Dashboard:** Single Page Application (SPA)\n  - Vue.js 3 or React 18 with TypeScript\n  - State management: Vuex/Pinia or Redux Toolkit\n  - UI component library: Vuetify or Material-UI\n  - Charts and analytics: Chart.js or D3.js\n  - Real-time updates: WebSocket or Server-Sent Events\n\n#### Backend Technologies\n- **Application Server:** Node.js with Express.js or Fastify\n- **Language:** TypeScript for type safety\n- **API Architecture:** RESTful API with GraphQL for complex queries\n- **Authentication:** JWT tokens with refresh token rotation\n- **Real-time Communication:** Socket.io or native WebSocket\n- **Background Jobs:** Bull Queue with Redis\n\n#### Database & Storage\n- **Primary Database:** PostgreSQL 14+ with row-level security\n- **Caching:** Redis for session management and caching\n- **File Storage:** Backblaze B2 Cloud Storage\n- **Search:** PostgreSQL full-text search or Elasticsearch\n- **Database Migrations:** Knex.js or Prisma\n\n#### Infrastructure & DevOps\n- **Containerization:** Docker and Docker Compose\n- **Orchestration:** Kubernetes or Docker Swarm\n- **CI/CD:** GitHub Actions or GitLab CI\n- **Monitoring:** Prometheus + Grafana\n- **Logging:** ELK Stack (Elasticsearch, Logstash, Kibana)\n- **Load Balancing:** Nginx or HAProxy\n\n---\n\n## 2. Database Design Specifications\n\n### 2.1 Multi-Tenant Strategy\n**Row-Level Security (RLS) Approach:**\n- Single database with tenant_id in all tenant-specific tables\n- PostgreSQL RLS policies to enforce tenant isolation\n- Connection pooling with tenant context\n- Shared tables for system-wide data (user roles, system settings)\n\n### 2.2 Database Schema Details\n\n#### Core Tables Structure\n\n```sql\n-- Tenants table (Master tenant registry)\nCREATE TABLE tenants (\n    tenant_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    company_name VARCHAR(255) NOT NULL,\n    industry_type VARCHAR(100) NOT NULL,\n    subscription_plan VARCHAR(50) NOT NULL,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    is_active BOOLEAN DEFAULT true,\n    contact_details JSONB,\n    timezone VARCHAR(50) DEFAULT 'UTC'\n);\n\n-- Users table with tenant isolation\nCREATE TABLE users (\n    user_id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n    tenant_id UUID REFERENCES tenants(tenant_id),\n    email VARCHAR(255) UNIQUE NOT NULL,\n    password_hash VARCHAR(255) NOT NULL,\n    first_name VARCHAR(100) NOT NULL,\n    last_name VARCHAR(100) NOT NULL,\n    role VARCHAR(50) NOT NULL CHECK (role IN ('admin', 'manager', 'staff')),\n    is_active BOOLEAN DEFAULT true,\n    last_login TIMESTAMP,\n    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,\n    phone_number VARCHAR(20),\n    preferences JSONB DEFAULT '{}'\n);\n\n-- Enable RLS\nALTER TABLE users ENABLE ROW LEVEL SECURITY;\nCREATE POLICY tenant_isolation_policy ON users \n    USING (tenant_id = current_setting('app.current_tenant')::UUID);\n```\n\n### 2.3 Indexing Strategy\n```sql\n-- Performance indexes\nCREATE INDEX idx_users_tenant_id ON users(tenant_id);\nCREATE INDEX idx_users_email ON users(email);\nCREATE INDEX idx_feedback_responses_tenant_location ON feedback_responses(tenant_id, location_id);\nCREATE INDEX idx_feedback_responses_submitted_at ON feedback_responses(submitted_at);\nCREATE INDEX idx_custom_field_values_response_id ON custom_field_values(response_id);\nCREATE INDEX idx_multimedia_files_response_id ON multimedia_files(response_id);\n\n-- Full-text search indexes\nCREATE INDEX idx_feedback_responses_text_search \n    ON feedback_responses USING gin(to_tsvector('english', feedback_text));\n```\n\n### 2.4 Data Partitioning\n```sql\n-- Partition feedback_responses by date for better performance\nCREATE TABLE feedback_responses (\n    response_id UUID DEFAULT gen_random_uuid(),\n    tenant_id UUID NOT NULL,\n    submitted_at TIMESTAMP NOT NULL,\n    -- other columns...\n    PRIMARY KEY (response_id, submitted_at)\n) PARTITION BY RANGE (submitted_at);\n\n-- Create monthly partitions\nCREATE TABLE feedback_responses_2025_08 PARTITION OF feedback_responses\n    FOR VALUES FROM ('2025-08-01') TO ('2025-09-01');\n```\n\n---\n\n## 3. API Design Specifications\n\n### 3.1 API Architecture\n- **Base URL:** `https://api.feedbackplatform.com/v1`\n- **Authentication:** Bearer token (JWT)\n- **Rate Limiting:** 1000 requests/hour per tenant\n- **Response Format:** JSON with consistent error handling\n- **Versioning:** URL-based versioning (/v1/, /v2/)\n\n### 3.2 Core API Endpoints\n\n#### Authentication Endpoints\n```http\nPOST /auth/login\nPOST /auth/register\nPOST /auth/refresh\nPOST /auth/logout\nPOST /auth/forgot-password\nPOST /auth/reset-password\n```\n\n#### Tenant Management\n```http\nGET    /tenants/profile\nPUT    /tenants/profile\nGET    /tenants/settings\nPUT    /tenants/settings\nPOST   /tenants/invite-user\n```\n\n#### Survey Management\n```http\nGET    /surveys/templates\nPOST   /surveys/templates\nPUT    /surveys/templates/{templateId}\nDELETE /surveys/templates/{templateId}\nGET    /surveys/custom-fields\nPOST   /surveys/custom-fields\nPUT    /surveys/custom-fields/{fieldId}\nDELETE /surveys/custom-fields/{fieldId}\n```\n\n#### QR Code Management\n```http\nGET    /qr-codes\nPOST   /qr-codes\nPUT    /qr-codes/{qrCodeId}\nDELETE /qr-codes/{qrCodeId}\nGET    /qr-codes/{qrCodeId}/analytics\n```\n\n#### Feedback Collection\n```http\nGET    /feedback/form/{qrCodeId}\nPOST   /feedback/submit\nGET    /feedback/responses\nGET    /feedback/responses/{responseId}\nPUT    /feedback/responses/{responseId}\nDELETE /feedback/responses/{responseId}\n```\n\n#### File Management (Backblaze Integration)\n```http\nPOST   /files/upload\nGET    /files/{fileId}\nDELETE /files/{fileId}\nGET    /files/{fileId}/download-url\n```\n\n#### Analytics & Reporting\n```http\nGET    /analytics/dashboard\nGET    /analytics/metrics\nPOST   /reports/generate\nGET    /reports\nGET    /reports/{reportId}/download\n```\n\n### 3.3 API Response Format\n```json\n{\n  \"success\": true,\n  \"data\": {\n    // Response data\n  },\n  \"message\": \"Success message\",\n  \"timestamp\": \"2025-08-03T10:30:00Z\",\n  \"version\": \"1.0\"\n}\n```\n\n### 3.4 Error Response Format\n```json\n{\n  \"success\": false,\n  \"error\": {\n    \"code\": \"VALIDATION_ERROR\",\n    \"message\": \"Invalid input data\",\n    \"details\": [\n      {\n        \"field\": \"email\",\n        \"message\": \"Email is required\"\n      }\n    ]\n  },\n  \"timestamp\": \"2025-08-03T10:30:00Z\",\n  \"version\": \"1.0\"\n}\n```\n\n---\n\n## 4. Backblaze B2 Integration\n\n### 4.1 Integration Architecture\n```javascript\n// Backblaze B2 Service Configuration\nconst B2Service = {\n  applicationKeyId: process.env.B2_APPLICATION_KEY_ID,\n  applicationKey: process.env.B2_APPLICATION_KEY,\n  bucketId: process.env.B2_BUCKET_ID,\n  bucketName: process.env.B2_BUCKET_NAME,\n  \n  // File organization structure\n  getFilePath: (tenantId, fileType, fileName) => {\n    return `tenants/${tenantId}/${fileType}/${Date.now()}_${fileName}`;\n  }\n};\n```\n\n### 4.2 File Upload Process\n1. **Client Side:** Capture voice/image using browser APIs\n2. **Frontend:** Compress and validate file before upload\n3. **Backend:** Generate signed upload URL from Backblaze\n4. **Client:** Direct upload to Backblaze using signed URL\n5. **Backend:** Store file metadata in database with Backblaze file ID\n6. **Processing:** Background job for file processing (thumbnail generation, transcription)\n\n### 4.3 File Management Features\n```javascript\n// File upload service\nclass FileUploadService {\n  async uploadToBackblaze(file, tenantId, fileType) {\n    // 1. Validate file (size, type, malware scan)\n    // 2. Generate unique file path\n    // 3. Get upload authorization from B2\n    // 4. Upload file to B2\n    // 5. Store metadata in database\n    // 6. Return file URL and metadata\n  }\n  \n  async generateSignedUrl(fileId, expirationTime = 3600) {\n    // Generate time-limited access URL for secure file access\n  }\n  \n  async deleteFile(fileId) {\n    // Delete from both B2 and database\n  }\n}\n```\n\n### 4.4 File Storage Strategy\n- **Voice Files:** MP3/WAV format, max 2 minutes, stored in `/voice/` folder\n- **Images:** JPEG/PNG format, max 20MB, compressed and stored in `/images/` folder\n- **Generated Reports:** PDF/CSV/Excel, stored in `/reports/` folder\n- **File Naming:** `{timestamp}_{uuid}_{original_name}`\n- **Lifecycle:** Auto-delete after configurable retention period\n\n---\n\n## 5. Security Requirements\n\n### 5.1 Authentication & Authorization\n```javascript\n// JWT Token Structure\n{\n  \"sub\": \"user_id\",\n  \"tenant_id\": \"tenant_uuid\",\n  \"role\": \"admin|manager|staff\",\n  \"permissions\": [\"read:feedback\", \"write:surveys\"],\n  \"iat\": 1691234567,\n  \"exp\": 1691320967,\n  \"iss\": \"feedback-platform\"\n}\n\n// Role-Based Access Control\nconst PERMISSIONS = {\n  admin: [\n    'manage:users', 'manage:settings', 'manage:billing',\n    'read:all', 'write:all', 'delete:all'\n  ],\n  manager: [\n    'manage:surveys', 'manage:locations', 'manage:alerts',\n    'read:feedback', 'write:feedback', 'export:reports'\n  ],\n  staff: [\n    'read:feedback', 'respond:feedback', 'view:analytics'\n  ]\n};\n```\n\n### 5.2 Data Encryption\n```javascript\n// Encryption Service\nclass EncryptionService {\n  // Encrypt sensitive customer data\n  static encryptPII(data) {\n    return crypto.encrypt(data, process.env.ENCRYPTION_KEY);\n  }\n  \n  // Database field encryption for PII\n  static encryptFields = [\n    'customer_email', 'customer_phone', 'customer_name'\n  ];\n  \n  // Backblaze file encryption\n  static encryptFile(buffer) {\n    return crypto.encrypt(buffer, process.env.FILE_ENCRYPTION_KEY);\n  }\n}\n```\n\n### 5.3 Input Validation & Sanitization\n```javascript\n// Request validation schemas\nconst feedbackSchema = {\n  customer_name: Joi.string().min(2).max(100).required(),\n  customer_email: Joi.string().email().optional(),\n  customer_phone: Joi.string().pattern(/^\\+?[\\d\\s-()]+$/).optional(),\n  overall_rating: Joi.number().min(1).max(5).required(),\n  feedback_text: Joi.string().max(5000).optional(),\n  custom_fields: Joi.object().pattern(\n    Joi.string().uuid(),\n    Joi.alternatives().try(Joi.string(), Joi.number(), Joi.boolean())\n  )\n};\n```\n\n### 5.4 Security Headers & Middleware\n```javascript\n// Security middleware configuration\napp.use(helmet({\n  contentSecurityPolicy: {\n    directives: {\n      defaultSrc: [\"'self'\"],\n      scriptSrc: [\"'self'\", \"'unsafe-inline'\"],\n      styleSrc: [\"'self'\", \"'unsafe-inline'\"],\n      imgSrc: [\"'self'\", \"data:\", \"https:\"],\n      connectSrc: [\"'self'\", \"wss:\", \"https:\"]\n    }\n  },\n  hsts: {\n    maxAge: 31536000,\n    includeSubDomains: true,\n    preload: true\n  }\n}));\n\n// Rate limiting by tenant\nconst createRateLimiter = (windowMs, max) => {\n  return rateLimit({\n    windowMs,\n    max,\n    keyGenerator: (req) => `${req.user.tenant_id}:${req.ip}`,\n    message: 'Too many requests from this tenant'\n  });\n};\n```\n\n---\n\n## 6. Performance Specifications\n\n### 6.1 Response Time Requirements\n- **API Endpoints:** < 200ms for 95% of requests\n- **Database Queries:** < 100ms for simple queries, < 500ms for complex analytics\n- **File Uploads:** < 10 seconds for 20MB files\n- **Page Load Times:** < 3 seconds for initial load, < 1 second for subsequent pages\n\n### 6.2 Caching Strategy\n```javascript\n// Redis caching implementation\nclass CacheService {\n  // Cache frequently accessed data\n  static cacheKeys = {\n    userSession: (userId) => `session:${userId}`,\n    tenantSettings: (tenantId) => `tenant:${tenantId}:settings`,\n    surveyTemplate: (templateId) => `template:${templateId}`,\n    analytics: (tenantId, period) => `analytics:${tenantId}:${period}`\n  };\n  \n  static async cacheAnalytics(tenantId, period, data) {\n    const key = this.cacheKeys.analytics(tenantId, period);\n    await redis.setex(key, 3600, JSON.stringify(data)); // 1 hour cache\n  }\n  \n  static async getCachedAnalytics(tenantId, period) {\n    const key = this.cacheKeys.analytics(tenantId, period);\n    const cached = await redis.get(key);\n    return cached ? JSON.parse(cached) : null;\n  }\n}\n```\n\n### 6.3 Database Optimization\n```sql\n-- Connection pooling configuration\nconst dbConfig = {\n  host: process.env.DB_HOST,\n  port: process.env.DB_PORT,\n  database: process.env.DB_NAME,\n  user: process.env.DB_USER,\n  password: process.env.DB_PASSWORD,\n  pool: {\n    min: 5,\n    max: 20,\n    acquireTimeoutMillis: 30000,\n    createTimeoutMillis: 30000,\n    destroyTimeoutMillis: 5000,\n    idleTimeoutMillis: 30000,\n    reapIntervalMillis: 1000,\n    createRetryIntervalMillis: 200\n  }\n};\n\n-- Query optimization examples\n-- Use prepared statements\nPREPARE get_feedback_by_tenant AS \nSELECT * FROM feedback_responses \nWHERE tenant_id = $1 AND submitted_at >= $2 \nORDER BY submitted_at DESC LIMIT $3;\n\n-- Materialized views for analytics\nCREATE MATERIALIZED VIEW tenant_analytics_daily AS\nSELECT \n  tenant_id,\n  DATE(submitted_at) as date,\n  COUNT(*) as total_responses,\n  AVG(overall_rating) as avg_rating,\n  COUNT(CASE WHEN overall_rating <= 2 THEN 1 END) as negative_responses\nFROM feedback_responses\nGROUP BY tenant_id, DATE(submitted_at);\n\n-- Refresh materialized views via background job\nREFRESH MATERIALIZED VIEW CONCURRENTLY tenant_analytics_daily;\n```\n\n---\n\n## 7. Scalability Architecture\n\n### 7.1 Horizontal Scaling Strategy\n```yaml\n# Kubernetes deployment configuration\napiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: feedback-platform-api\nspec:\n  replicas: 3\n  selector:\n    matchLabels:\n      app: feedback-platform-api\n  template:\n    metadata:\n      labels:\n        app: feedback-platform-api\n    spec:\n      containers:\n      - name: api\n        image: feedback-platform:latest\n        ports:\n        - containerPort: 3000\n        env:\n        - name: NODE_ENV\n          value: production\n        - name: DB_HOST\n          valueFrom:\n            secretKeyRef:\n              name: db-credentials\n              key: host\n        resources:\n          requests:\n            memory: \"256Mi\"\n            cpu: \"250m\"\n          limits:\n            memory: \"512Mi\"\n            cpu: \"500m\"\n---\napiVersion: v1\nkind: Service\nmetadata:\n  name: feedback-platform-service\nspec:\n  selector:\n    app: feedback-platform-api\n  ports:\n  - port: 80\n    targetPort: 3000\n  type: LoadBalancer\n```\n\n### 7.2 Auto-scaling Configuration\n```yaml\napiVersion: autoscaling/v2\nkind: HorizontalPodAutoscaler\nmetadata:\n  name: feedback-platform-hpa\nspec:\n  scaleTargetRef:\n    apiVersion: apps/v1\n    kind: Deployment\n    name: feedback-platform-api\n  minReplicas: 3\n  maxReplicas: 10\n  metrics:\n  - type: Resource\n    resource:\n      name: cpu\n      target:\n        type: Utilization\n        averageUtilization: 70\n  - type: Resource\n    resource:\n      name: memory\n      target:\n        type: Utilization\n        averageUtilization: 80\n```\n\n### 7.3 Database Scaling\n```javascript\n// Read replica configuration\nconst dbConfig = {\n  master: {\n    host: process.env.DB_MASTER_HOST,\n    // ... master config\n  },\n  slaves: [\n    { host: process.env.DB_SLAVE_1_HOST },\n    { host: process.env.DB_SLAVE_2_HOST }\n  ]\n};\n\n// Query routing\nclass DatabaseService {\n  static async executeQuery(query, params, options = {}) {\n    const isReadQuery = query.trim().toLowerCase().startsWith('select');\n    const connection = isReadQuery && !options.forceMaster \n      ? this.getSlaveConnection() \n      : this.getMasterConnection();\n    \n    return await connection.query(query, params);\n  }\n  \n  static getSlaveConnection() {\n    // Round-robin load balancing for read queries\n    const slaveIndex = Math.floor(Math.random() * this.slaves.length);\n    return this.slaves[slaveIndex];\n  }\n}\n```\n\n---\n\n## 8. Integration Specifications\n\n### 8.1 Third-Party API Integrations\n\n#### Google Reviews API Integration\n```javascript\nclass GoogleReviewsService {\n  constructor(apiKey, placeId) {\n    this.apiKey = apiKey;\n    this.placeId = placeId;\n    this.baseUrl = 'https://maps.googleapis.com/maps/api/place';\n  }\n  \n  async fetchReviews() {\n    const response = await fetch(\n      `${this.baseUrl}/details/json?place_id=${this.placeId}&fields=reviews&key=${this.apiKey}`\n    );\n    const data = await response.json();\n    return this.transformReviews(data.result.reviews);\n  }\n  \n  transformReviews(reviews) {\n    return reviews.map(review => ({\n      external_review_id: review.author_name + review.time,\n      reviewer_name: review.author_name,\n      rating: review.rating,\n      review_text: review.text,\n      review_date: new Date(review.time * 1000),\n      platform_data: {\n        author_url: review.author_url,\n        profile_photo_url: review.profile_photo_url,\n        relative_time_description: review.relative_time_description\n      }\n    }));\n  }\n}\n```\n\n#### Yelp API Integration\n```javascript\nclass YelpService {\n  constructor(apiKey, businessId) {\n    this.apiKey = apiKey;\n    this.businessId = businessId;\n    this.baseUrl = 'https://api.yelp.com/v3';\n  }\n  \n  async fetchReviews() {\n    const response = await fetch(\n      `${this.baseUrl}/businesses/${this.businessId}/reviews`,\n      {\n        headers: {\n          'Authorization': `Bearer ${this.apiKey}`\n        }\n      }\n    );\n    const data = await response.json();\n    return this.transformReviews(data.reviews);\n  }\n}\n```\n\n### 8.2 Notification Services Integration\n```javascript\n// SMS Service (Twilio)\nclass SMSService {\n  static async sendSMS(to, message) {\n    const client = twilio(process.env.TWILIO_SID, process.env.TWILIO_TOKEN);\n    \n    return await client.messages.create({\n      body: message,\n      from: process.env.TWILIO_PHONE_NUMBER,\n      to: to\n    });\n  }\n}\n\n// Email Service (SendGrid)\nclass EmailService {\n  static async sendEmail(to, subject, content) {\n    const msg = {\n      to,\n      from: process.env.FROM_EMAIL,\n      subject,\n      html: content\n    };\n    \n    return await sgMail.send(msg);\n  }\n}\n\n// Push Notification Service\nclass PushNotificationService {\n  static async sendPushNotification(userId, title, body, data) {\n    // Implementation for web push notifications\n    const subscription = await getUserPushSubscription(userId);\n    \n    const payload = JSON.stringify({\n      title,\n      body,\n      data,\n      icon: '/icons/notification-icon.png',\n      badge: '/icons/notification-badge.png'\n    });\n    \n    return await webpush.sendNotification(subscription, payload);\n  }\n}\n```\n\n---\n\n## 9. Monitoring & Logging\n\n### 9.1 Application Monitoring\n```javascript\n// Prometheus metrics\nconst promClient = require('prom-client');\n\nconst httpRequestDuration = new promClient.Histogram({\n  name: 'http_request_duration_ms',\n  help: 'Duration of HTTP requests in ms',\n  labelNames: ['method', 'route', 'tenant_id'],\n  buckets: [0.1, 5, 15, 50, 100, 500]\n});\n\nconst activeConnections = new promClient.Gauge({\n  name: 'active_connections',\n  help: 'Number of active connections',\n  labelNames: ['tenant_id']\n});\n\n// Middleware for tracking metrics\nconst metricsMiddleware = (req, res, next) => {\n  const start = Date.now();\n  \n  res.on('finish', () => {\n    const duration = Date.now() - start;\n    httpRequestDuration\n      .labels(req.method, req.route?.path || req.path, req.user?.tenant_id)\n      .observe(duration);\n  });\n  \n  next();\n};\n```\n\n### 9.2 Structured Logging\n```javascript\nconst winston = require('winston');\n\nconst logger = winston.createLogger({\n  level: 'info',\n  format: winston.format.combine(\n    winston.format.timestamp(),\n    winston.format.errors({ stack: true }),\n    winston.format.json()\n  ),\n  defaultMeta: { service: 'feedback-platform' },\n  transports: [\n    new winston.transports.File({ filename: 'error.log', level: 'error' }),\n    new winston.transports.File({ filename: 'combined.log' }),\n    new winston.transports.Console({\n      format: winston.format.simple()\n    })\n  ]\n});\n\n// Structured logging for business events\nclass AuditLogger {\n  static logFeedbackSubmission(tenantId, responseId, metadata) {\n    logger.info('Feedback submitted', {\n      event: 'feedback_submission',\n      tenant_id: tenantId,\n      response_id: responseId,\n      timestamp: new Date().toISOString(),\n      metadata\n    });\n  }\n  \n  static logUserAction(userId, tenantId, action, resource) {\n    logger.info('User action', {\n      event: 'user_action',\n      user_id: userId,\n      tenant_id: tenantId,\n      action,\n      resource,\n      timestamp: new Date().toISOString()\n    });\n  }\n}\n```\n\n---\n\n## 10. Deployment & DevOps\n\n### 10.1 CI/CD Pipeline\n```yaml\n# .github/workflows/deploy.yml\nname: Deploy to Production\n\non:\n  push:\n    branches: [main]\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Setup Node.js\n        uses: actions/setup-node@v3\n        with:\n          node-version: '18'\n      - name: Install dependencies\n        run: npm ci\n      - name: Run tests\n        run: npm test\n      - name: Run linting\n        run: npm run lint\n      - name: Security audit\n        run: npm audit\n\n  build:\n    needs: test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v3\n      - name: Build Docker image\n        run: docker build -t feedback-platform:${{ github.sha }} .\n      - name: Push to registry\n        run: |\n          echo ${{ secrets.DOCKER_PASSWORD }} | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin\n          docker push feedback-platform:${{ github.sha }}\n\n  deploy:\n    needs: build\n    runs-on: ubuntu-latest\n    steps:\n      - name: Deploy to Kubernetes\n        run: |\n          kubectl set image deployment/feedback-platform-api api=feedback-platform:${{ github.sha }}\n          kubectl rollout status deployment/feedback-platform-api\n```\n\n### 10.2 Environment Configuration\n```javascript\n// config/environment.js\nconst config = {\n  development: {\n    database: {\n      host: 'localhost',\n      port: 5432,\n      database: 'feedback_dev',\n      ssl: false\n    },\n    redis: {\n      host: 'localhost',\n      port: 6379\n    },\n    backblaze: {\n      endpoint: 'https://s3.us-west-000.backblazeb2.com',\n      bucket: 'feedback-dev-bucket'\n    }\n  },\n  production: {\n    database: {\n      host: process.env.DB_HOST,\n      port: process.env.DB_PORT,\n      database: process.env.DB_NAME,\n      ssl: { rejectUnauthorized: false }\n    },\n    redis: {\n      host: process.env.REDIS_HOST,\n      port: process.env.REDIS_PORT,\n      password: process.env.REDIS_PASSWORD\n    },\n    backblaze: {\n      endpoint: process.env.B2_ENDPOINT,\n      bucket: process.env.B2_BUCKET_NAME\n    }\n  }\n};\n\nmodule.exports = config[process.env.NODE_ENV || 'development'];\n```\n\n---\n\n## 11. Testing Strategy\n\n### 11.1 Testing Pyramid\n```javascript\n// Unit Tests\ndescribe('FeedbackService', () => {\n  test('should create feedback response', async () => {\n    const mockData = {\n      tenant_id: 'uuid',\n      customer_name: 'John Doe',\n      overall_rating: 5,\n      feedback_text: 'Great service!'\n    };\n    \n    const result = await FeedbackService.createResponse(mockData);\n    expect(result).toHaveProperty('response_id');\n    expect(result.overall_rating).toBe(5);\n  });\n});\n\n// Integration Tests\ndescribe('Feedback API Integration', () => {\n  test('should submit feedback via API', async () => {\n    const response = await request(app)\n      .post('/api/v1/feedback/submit')\n      .send(validFeedbackData)\n      .expect(201);\n    \n    expect(response.body.success).toBe(true);\n    expect(response.body.data).toHaveProperty('response_id');\n  });\n});\n\n// End-to-End Tests (Playwright)\ntest('complete feedback submission flow', async ({ page }) => {\n  await page.goto('/feedback/qr123');\n  await page.fill('[data-testid=\"customer-name\"]', 'John Doe');\n  await page.click('[data-testid=\"rating-5\"]');\n  await page.fill('[data-testid=\"feedback-text\"]', 'Excellent service!');\n  await page.click('[data-testid=\"submit-button\"]');\n  \n  await expect(page.locator('[data-testid=\"success-message\"]')).toBeVisible();\n});\n```\n\n### 11.2 Performance Testing\n```javascript\n// Load testing with Artillery\nmodule.exports = {\n  config: {\n    target: 'https://api.feedbackplatform.com',\n    phases: [\n      { duration: 60, arrivalRate: 10 },\n      { duration: 120, arrivalRate: 20 },\n      { duration: 60, arrivalRate: 10 }\n    ]\n  },\n  scenarios: [\n    {\n      name: 'Submit feedback',\n      weight: 70,\n      flow: [\n        {\n          post: {\n            url: '/v1/feedback/submit',\n            headers: {\n              'Authorization': 'Bearer {{ token }}'\n            },\n            json: {\n              customer_name: 'Load Test User',\n              overall_rating: 4,\n              feedback_text: 'Load testing feedback'\n            }\n          }\n        }\n      ]\n    }\n  ]\n};\n```\n\n---\n\n## 12. Maintenance & Support\n\n### 12.1 Database Maintenance\n```sql\n-- Automated maintenance tasks\n-- Daily vacuum and analyze\nSELECT cron.schedule('vacuum-analyze', '0 2 * * *', 'VACUUM ANALYZE;');\n\n-- Weekly full backup\nSELECT cron.schedule('weekly-backup', '0 1 * * 0', \n  'pg_dump feedback_platform > /backups/weekly_$(date +%Y%m%d).sql');\n\n-- Monthly partition cleanup (keep 12 months)\nSELECT cron.schedule('partition-cleanup', '0 3 1 * *', \n  'DROP TABLE IF EXISTS feedback_responses_' || \n  to_char(CURRENT_DATE - INTERVAL ''13 months'', ''YYYY_MM'') || ';');\n```\n\n### 12.2 Monitoring Alerts\n```yaml\n# Prometheus alerting rules\ngroups:\n- name: feedback-platform-alerts\n  rules:\n  - alert: HighErrorRate\n    expr: rate(http_requests_total{status=~\"5..\"}[5m]) > 0.1\n    for: 5m\n    annotations:\n      summary: High error rate detected\n      \n  - alert: DatabaseConnectionsHigh\n    expr: pg_stat_activity_count > 80\n    for: 2m\n    annotations:\n      summary: Database connection count is high\n      \n  - alert: DiskSpaceHigh\n    expr: (node_filesystem_size_bytes - node_filesystem_free_bytes) / node_filesystem_size_bytes > 0.85\n    for: 5m\n    annotations:\n      summary: Disk space usage is above 85%\n```\n\n---\n\n## 13. Security Compliance\n\n### 13.1 GDPR Compliance Implementation\n```javascript\nclass GDPRService {\n  // Right to access\n  static async exportUserData(userId) {\n    const userData = await db.query(`\n      SELECT * FROM users WHERE user_id = $1\n      UNION ALL\n      SELECT * FROM feedback_responses WHERE customer_email = \n        (SELECT email FROM users WHERE user_id = $1)\n    `, [userId]);\n    \n    return {\n      personal_data: userData,\n      exported_at: new Date().toISOString(),\n      format: 'JSON'\n    };\n  }\n  \n  // Right to be forgotten\n  static async deleteUserData(userId) {\n    await db.transaction(async (trx) => {\n      // Anonymize feedback responses\n      await trx.query(`\n        UPDATE feedback_responses \n        SET customer_name = 'Anonymous', \n            customer_email = null, \n            customer_phone = null\n        WHERE customer_email = (SELECT email FROM users WHERE user_id = $1)\n      `, [userId]);\n      \n      // Delete user account\n      await trx.query('DELETE FROM users WHERE user_id = $1', [userId]);\n    });\n  }\n  \n  // Consent management\n  static async updateConsent(userId, consentType, granted) {\n    await db.query(`\n      INSERT INTO user_consents (user_id, consent_type, granted, updated_at)\n      VALUES ($1, $2, $3, CURRENT_TIMESTAMP)\n      ON CONFLICT (user_id, consent_type) \n      DO UPDATE SET granted = $3, updated_at = CURRENT_TIMESTAMP\n    `, [userId, consentType, granted]);\n  }\n}\n```\n\nThis comprehensive Technical Requirements Document provides your development team with detailed specifications for implementing the multi-industry feedback management platform. The document covers all technical aspects from architecture to deployment, ensuring a robust and scalable solution with proper Backblaze B2 integration.\n  \"","size_bytes":31049},"attached_assets/user_stories_implementation_1754199661059.md":{"content":"# User Stories & Implementation Guide\n## Multi-Industry Feedback Management SaaS Platform\n\n### Document Information\n- **Version:** 1.0\n- **Date:** August 2025\n- **Document Type:** User Stories & Implementation Guide\n- **Project:** Multi-Industry Feedback Management Platform\n\n---\n\n## 1. Epic Overview\n\n### Epic 1: Multi-Tenant User Management\n**As a** SaaS platform  \n**I want** to support multiple business customers with isolated data  \n**So that** each business can securely manage their feedback independently  \n\n### Epic 2: Custom Survey Builder\n**As a** business owner  \n**I want** to create custom feedback forms for my industry  \n**So that** I can collect relevant data specific to my business needs  \n\n### Epic 3: QR Code Feedback Collection\n**As a** customer  \n**I want** to easily provide feedback by scanning a QR code  \n**So that** I can quickly share my experience without downloading apps  \n\n### Epic 4: Real-time Analytics & Alerts\n**As a** business manager  \n**I want** to receive instant notifications about customer feedback  \n**So that** I can respond quickly to issues and improve service quality  \n\n### Epic 5: Multi-channel Review Management\n**As a** business owner  \n**I want** to manage both internal feedback and public reviews in one place  \n**So that** I can have a complete view of customer sentiment across all channels  \n\n---\n\n## 2. Detailed User Stories\n\n### 2.1 User Registration & Authentication\n\n#### Story 1: Business Registration\n**As a** new business owner  \n**I want** to register my company on the platform  \n**So that** I can start collecting customer feedback  \n\n**Acceptance Criteria:**\n- User can register with company name, industry, contact details\n- System creates isolated tenant environment\n- User receives confirmation email with setup instructions\n- Default survey template is created based on selected industry\n- User is redirected to onboarding flow\n\n**Technical Requirements:**\n- Multi-tenant database setup with RLS\n- Email verification service integration\n- Industry-specific template provisioning\n- JWT token generation for session management\n\n**Implementation Priority:** High\n**Story Points:** 8\n**Dependencies:** Database schema, authentication service\n\n---\n\n#### Story 2: User Authentication\n**As a** business user  \n**I want** to securely log into my account  \n**So that** I can access my company's feedback data  \n\n**Acceptance Criteria:**\n- User can log in with email and password\n- System supports 2FA for enhanced security\n- JWT tokens expire after 15 minutes with refresh capability\n- Failed login attempts are logged and rate-limited\n- \"Remember me\" option extends session duration\n\n**Technical Requirements:**\n- JWT token implementation with refresh tokens\n- Rate limiting for login attempts\n- 2FA integration (TOTP/SMS)\n- Session management with Redis\n\n**Implementation Priority:** High\n**Story Points:** 5\n**Dependencies:** Redis setup, JWT library\n\n---\n\n### 2.2 Survey Management\n\n#### Story 3: Create Custom Survey Fields\n**As a** restaurant manager  \n**I want** to add custom fields like \"Table Number\" and \"Server Name\"  \n**So that** I can track feedback for specific tables and staff members  \n\n**Acceptance Criteria:**\n- User can add custom fields via drag-and-drop interface\n- Supported field types: text, number, dropdown, date, rating\n- Fields can be marked as required or optional\n- Real-time preview of survey form\n- Custom fields are tenant-specific\n\n**Technical Requirements:**\n- Dynamic form builder UI component\n- Custom fields database table with tenant isolation\n- Form validation engine\n- Real-time preview functionality\n\n**Implementation Priority:** High\n**Story Points:** 13\n**Dependencies:** Form builder library, database schema\n\n---\n\n#### Story 4: Industry-Specific Templates\n**As a** hospital administrator  \n**I want** to use a pre-built feedback template for healthcare  \n**So that** I can quickly start collecting patient satisfaction data  \n\n**Acceptance Criteria:**\n- System provides templates for 7 core industries\n- Templates include industry-specific fields and questions\n- User can modify existing templates or create new ones\n- Templates can be shared across locations within the same tenant\n- Version control for template changes\n\n**Technical Requirements:**\n- Template storage system\n- Template versioning mechanism\n- Industry-specific field definitions\n- Template sharing functionality\n\n**Implementation Priority:** Medium\n**Story Points:** 8\n**Dependencies:** Template database design\n\n---\n\n### 2.3 QR Code System\n\n#### Story 5: Generate QR Codes for Tables\n**As a** restaurant owner  \n**I want** to generate QR codes for each table  \n**So that** customers can easily provide feedback for their specific dining experience  \n\n**Acceptance Criteria:**\n- System generates unique QR codes for each table/location\n- QR codes encode company name, location, and table identifier\n- Bulk QR code generation for multiple tables\n- Printable QR code formats (PDF, PNG)\n- QR codes can be regenerated for security\n\n**Technical Requirements:**\n- QR code generation library\n- Bulk generation API endpoint\n- PDF generation for printing\n- Secure URL encoding\n- Backblaze integration for QR code storage\n\n**Implementation Priority:** High\n**Story Points:** 8\n**Dependencies:** QR code library, PDF generation service\n\n---\n\n#### Story 6: Track QR Code Analytics\n**As a** business manager  \n**I want** to see how often each QR code is scanned  \n**So that** I can understand customer engagement patterns  \n\n**Acceptance Criteria:**\n- Track scan count and unique scans per QR code\n- Monitor completion rates for each QR code\n- Daily/weekly/monthly scan analytics\n- Export QR code performance data\n- Alert for low-performing QR codes\n\n**Technical Requirements:**\n- Analytics data collection\n- Time-series data storage\n- Analytics dashboard components\n- Export functionality\n- Alert system integration\n\n**Implementation Priority:** Medium\n**Story Points:** 8\n**Dependencies:** Analytics service, dashboard framework\n\n---\n\n### 2.4 Customer Feedback Collection\n\n#### Story 7: Mobile-Optimized Feedback Form\n**As a** customer  \n**I want** to easily complete a feedback form on my mobile device  \n**So that** I can quickly share my experience without frustration  \n\n**Acceptance Criteria:**\n- Form is fully responsive and mobile-optimized\n- Progressive form completion with save/resume capability\n- Offline form completion with sync when online\n- Touch-friendly interface with large buttons\n- Auto-save as user types\n\n**Technical Requirements:**\n- Progressive Web App (PWA) implementation\n- Responsive CSS framework (Tailwind)\n- Service Worker for offline capability\n- Local storage for temporary data\n- Mobile-first design principles\n\n**Implementation Priority:** High\n**Story Points:** 13\n**Dependencies:** PWA service worker, responsive framework\n\n---\n\n#### Story 8: Voice Feedback Recording\n**As a** customer  \n**I want** to record voice feedback instead of typing  \n**So that** I can provide detailed feedback more conveniently  \n\n**Acceptance Criteria:**\n- Record voice feedback up to 2 minutes\n- Voice recording works in mobile browsers\n- Audio compression for optimal upload\n- Playback capability before submission\n- Integration with Backblaze for storage\n\n**Technical Requirements:**\n- MediaRecorder API implementation\n- Audio compression algorithms\n- Backblaze B2 integration for voice files\n- Audio playback controls\n- File size validation\n\n**Implementation Priority:** Medium\n**Story Points:** 13\n**Dependencies:** Backblaze B2 setup, audio processing library\n\n---\n\n#### Story 9: Image Upload for Visual Feedback\n**As a** customer  \n**I want** to upload photos with my feedback  \n**So that** I can show specific issues or highlight positive experiences  \n\n**Acceptance Criteria:**\n- Upload images up to 20MB\n- Image compression for web optimization\n- Camera integration for direct photo capture\n- Image preview before submission\n- Secure storage in Backblaze B2\n\n**Technical Requirements:**\n- File upload component\n- Image compression library\n- Camera API integration\n- Image preview functionality\n- Backblaze B2 file management\n\n**Implementation Priority:** Medium\n**Story Points:** 10\n**Dependencies:** Image processing library, Backblaze B2\n\n---\n\n### 2.5 Real-time Alerts & Notifications\n\n#### Story 10: Low Rating Alerts\n**As a** restaurant manager  \n**I want** to receive immediate alerts when customers give low ratings  \n**So that** I can quickly address issues and recover the customer experience  \n\n**Acceptance Criteria:**\n- Configurable rating thresholds for alerts\n- Multiple notification channels (SMS, email, push)\n- Real-time alert delivery within 30 seconds\n- Alert acknowledgment tracking\n- Escalation rules for unaddressed alerts\n\n**Technical Requirements:**\n- Real-time event processing system\n- SMS service integration (Twilio)\n- Email service integration (SendGrid)\n- Push notification service\n- Alert management dashboard\n\n**Implementation Priority:** High\n**Story Points:** 13\n**Dependencies:** Twilio/SendGrid setup, real-time processing\n\n---\n\n#### Story 11: Custom Alert Rules\n**As a** business owner  \n**I want** to create custom alert rules based on keywords and ratings  \n**So that** I can be notified about specific issues important to my business  \n\n**Acceptance Criteria:**\n- Create alerts based on rating thresholds\n- Keyword-based alerts from feedback text\n- Time-based alert rules (e.g., high volume)\n- Role-based alert routing\n- Alert rule testing and validation\n\n**Technical Requirements:**\n- Rule engine for alert conditions\n- Text analysis for keyword detection\n- Alert routing system\n- Rule validation framework\n- Testing interface for alert rules\n\n**Implementation Priority:** Medium\n**Story Points:** 10\n**Dependencies:** Text processing library, rule engine\n\n---\n\n### 2.6 Analytics & Reporting\n\n#### Story 12: Real-time Dashboard\n**As a** business manager  \n**I want** to see real-time analytics of customer feedback  \n**So that** I can monitor performance and make data-driven decisions  \n\n**Acceptance Criteria:**\n- Real-time metrics: response count, average rating, NPS\n- Interactive charts and graphs\n- Filter by date range, location, rating\n- Trend analysis over time\n- Export dashboard data\n\n**Technical Requirements:**\n- Real-time data processing\n- Chart library (Chart.js/D3.js)\n- WebSocket for live updates\n- Data aggregation services\n- Export functionality\n\n**Implementation Priority:** High\n**Story Points:** 13\n**Dependencies:** Chart library, WebSocket implementation\n\n---\n\n#### Story 13: Automated Report Generation\n**As a** regional manager  \n**I want** to receive weekly automated reports  \n**So that** I can track performance across multiple locations  \n\n**Acceptance Criteria:**\n- Schedule reports (daily, weekly, monthly)\n- Multiple formats (PDF, CSV, Excel)\n- Email delivery of generated reports\n- Custom report templates\n- Report archival and access history\n\n**Technical Requirements:**\n- Report generation service\n- PDF/Excel generation libraries\n- Email scheduling system\n- Template engine for reports\n- Backblaze storage for report files\n\n**Implementation Priority:** Medium\n**Story Points:** 10\n**Dependencies:** Report generation libraries, scheduling system\n\n---\n\n### 2.7 Public Review Integration\n\n#### Story 14: Google Reviews Integration\n**As a** business owner  \n**I want** to import my Google Reviews automatically  \n**So that** I can see all customer feedback in one centralized dashboard  \n\n**Acceptance Criteria:**\n- Connect Google My Business account via API\n- Automated daily import of new reviews\n- Display reviews alongside internal feedback\n- Unified sentiment analysis across all channels\n- Response management for public reviews\n\n**Technical Requirements:**\n- Google Places API integration\n- Automated data synchronization\n- Review data normalization\n- Sentiment analysis service\n- Unified dashboard display\n\n**Implementation Priority:** Medium\n**Story Points:** 13\n**Dependencies:** Google API access, sentiment analysis service\n\n---\n\n#### Story 15: Multi-Platform Review Aggregation\n**As a** hotel manager  \n**I want** to aggregate reviews from Google, Yelp, and TripAdvisor  \n**So that** I can have a complete view of online customer sentiment  \n\n**Acceptance Criteria:**\n- Support for multiple review platforms\n- Automated review import and synchronization\n- Duplicate review detection and merging\n- Platform-specific review metrics\n- Unified reporting across all platforms\n\n**Technical Requirements:**\n- Multiple API integrations (Google, Yelp, TripAdvisor)\n- Data deduplication algorithms\n- Platform-specific data mapping\n- Unified data model for reviews\n- Cross-platform analytics\n\n**Implementation Priority:** Low\n**Story Points:** 21\n**Dependencies:** Multiple API keys, data processing pipeline\n\n---\n\n### 2.8 Data Management & Compliance\n\n#### Story 16: GDPR Data Export\n**As a** customer  \n**I want** to request and download all my personal data  \n**So that** I can exercise my right to data portability under GDPR  \n\n**Acceptance Criteria:**\n- Customer can request data export via web interface\n- System generates complete data package within 30 days\n- Data includes all feedback, personal info, and interactions\n- Export in machine-readable format (JSON/CSV)\n- Secure download link with expiration\n\n**Technical Requirements:**\n- Data export service\n- Customer portal for requests\n- Data aggregation across all tables\n- Secure file generation and delivery\n- Request tracking and audit logs\n\n**Implementation Priority:** High (Compliance)\n**Story Points:** 8\n**Dependencies:** GDPR compliance framework\n\n---\n\n#### Story 17: Data Retention Policies\n**As a** platform administrator  \n**I want** to automatically delete old data per retention policies  \n**So that** I can comply with data protection regulations  \n\n**Acceptance Criteria:**\n- Configurable retention periods per data type\n- Automated deletion of expired data\n- Audit logs for all deletion activities\n- Exception handling for legal holds\n- Customer notification before data deletion\n\n**Technical Requirements:**\n- Data lifecycle management system\n- Automated deletion jobs\n- Audit logging framework\n- Legal hold management\n- Customer notification service\n\n**Implementation Priority:** High (Compliance)\n**Story Points:** 10\n**Dependencies:** Legal framework definition\n\n---\n\n## 3. Implementation Sprint Planning\n\n### Sprint 1 (2 weeks): Foundation Setup\n**Goal:** Establish core infrastructure and authentication\n\n**Stories:**\n- User Registration & Authentication (Stories 1, 2)\n- Basic tenant setup and database schema\n- JWT authentication system\n- Basic API structure\n\n**Deliverables:**\n- Multi-tenant database with RLS\n- Authentication endpoints\n- User registration flow\n- Basic admin dashboard shell\n\n---\n\n### Sprint 2 (2 weeks): Survey Management Core\n**Goal:** Build survey creation and management capabilities\n\n**Stories:**\n- Create Custom Survey Fields (Story 3)\n- Industry-Specific Templates (Story 4)\n- Basic survey builder UI\n\n**Deliverables:**\n- Custom fields management\n- Template system\n- Survey builder interface\n- Field validation framework\n\n---\n\n### Sprint 3 (2 weeks): QR Code System\n**Goal:** Implement QR code generation and tracking\n\n**Stories:**\n- Generate QR Codes for Tables (Story 5)\n- Track QR Code Analytics (Story 6)\n- QR code management interface\n\n**Deliverables:**\n- QR code generation service\n- QR code analytics dashboard\n- Printable QR code formats\n- Basic tracking implementation\n\n---\n\n### Sprint 4 (3 weeks): Customer Feedback Collection\n**Goal:** Build customer-facing feedback forms\n\n**Stories:**\n- Mobile-Optimized Feedback Form (Story 7)\n- Voice Feedback Recording (Story 8)\n- Image Upload for Visual Feedback (Story 9)\n\n**Deliverables:**\n- Responsive feedback forms\n- Backblaze B2 integration\n- Voice recording functionality\n- Image upload and processing\n\n---\n\n### Sprint 5 (2 weeks): Alerts & Notifications\n**Goal:** Implement real-time alerting system\n\n**Stories:**\n- Low Rating Alerts (Story 10)\n- Custom Alert Rules (Story 11)\n- Notification services setup\n\n**Deliverables:**\n- Real-time alert processing\n- SMS/Email integration\n- Alert management dashboard\n- Custom rule engine\n\n---\n\n### Sprint 6 (3 weeks): Analytics & Reporting\n**Goal:** Build comprehensive analytics and reporting\n\n**Stories:**\n- Real-time Dashboard (Story 12)\n- Automated Report Generation (Story 13)\n- Advanced analytics features\n\n**Deliverables:**\n- Interactive dashboard\n- Report generation service\n- Data visualization components\n- Export functionality\n\n---\n\n### Sprint 7 (3 weeks): External Integrations\n**Goal:** Integrate with public review platforms\n\n**Stories:**\n- Google Reviews Integration (Story 14)\n- Multi-Platform Review Aggregation (Story 15)\n- Unified review dashboard\n\n**Deliverables:**\n- Google Places API integration\n- Review import automation\n- Unified review dashboard\n- Cross-platform analytics\n\n---\n\n### Sprint 8 (2 weeks): Compliance & Polish\n**Goal:** Implement data compliance and final polish\n\n**Stories:**\n- GDPR Data Export (Story 16)\n- Data Retention Policies (Story 17)\n- Security audit and testing\n\n**Deliverables:**\n- GDPR compliance features\n- Data retention automation\n- Security testing results\n- Performance optimization\n\n---\n\n## 4. Definition of Done\n\n### For Each User Story:\n- [ ] Acceptance criteria met and verified\n- [ ] Unit tests written and passing (>90% coverage)\n- [ ] Integration tests completed\n- [ ] API documentation updated\n- [ ] Security review completed\n- [ ] Performance testing passed\n- [ ] Accessibility testing completed (WCAG 2.1 AA)\n- [ ] Cross-browser testing completed\n- [ ] Mobile responsiveness verified\n- [ ] Code review approved by 2+ developers\n- [ ] Deployed to staging environment\n- [ ] Stakeholder acceptance received\n\n### For Each Sprint:\n- [ ] All story acceptance criteria met\n- [ ] Sprint retrospective completed\n- [ ] Demo to stakeholders conducted\n- [ ] Documentation updated\n- [ ] Deployment to production completed\n- [ ] Monitoring alerts configured\n- [ ] Performance metrics baseline established\n\n---\n\n## 5. Risk Mitigation Strategies\n\n### Technical Risks:\n1. **Multi-tenant Data Isolation**\n   - Mitigation: Comprehensive testing of RLS policies\n   - Contingency: Database-level isolation as backup\n\n2. **Backblaze B2 Integration Complexity**\n   - Mitigation: Early prototype and testing\n   - Contingency: Alternative cloud storage providers\n\n3. **Real-time Performance Requirements**\n   - Mitigation: Load testing throughout development\n   - Contingency: Graceful degradation strategies\n\n### Business Risks:\n1. **Changing Requirements**\n   - Mitigation: Regular stakeholder reviews\n   - Contingency: Agile sprint adjustments\n\n2. **Third-party API Limitations**\n   - Mitigation: API rate limit monitoring\n   - Contingency: Fallback strategies for API failures\n\n---\n\n## 6. Success Metrics\n\n### Technical Metrics:\n- **Response Time:** < 200ms for 95% of API calls\n- **Uptime:** 99.9% availability\n- **Test Coverage:** > 90% code coverage\n- **Performance:** Support 1000+ concurrent users\n\n### Business Metrics:\n- **User Adoption:** > 80% of registered businesses actively using\n- **Customer Satisfaction:** > 4.5/5 rating from business users\n- **Feedback Completion Rate:** > 70% of QR code scans result in submitted feedback\n- **Platform Growth:** 50+ new business registrations per month\n\nThis comprehensive User Stories & Implementation Guide provides your development team with detailed requirements, acceptance criteria, and a clear implementation roadmap for building the multi-industry feedback management platform.","size_bytes":19566},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/objectAcl.ts":{"content":"import { File } from \"@google-cloud/storage\";\n\nconst ACL_POLICY_METADATA_KEY = \"custom:aclPolicy\";\n\n// The type of the access group.\n//\n// Can be flexibly defined according to the use case.\n//\n// Examples:\n// - USER_LIST: the users from a list stored in the database;\n// - EMAIL_DOMAIN: the users whose email is in a specific domain;\n// - GROUP_MEMBER: the users who are members of a specific group;\n// - SUBSCRIBER: the users who are subscribers of a specific service / content\n//   creator.\nexport enum ObjectAccessGroupType {}\n\n// The logic user group that can access the object.\nexport interface ObjectAccessGroup {\n  // The type of the access group.\n  type: ObjectAccessGroupType;\n  // The logic id that is enough to identify the qualified group members.\n  //\n  // It may have different format for different types. For example:\n  // - for USER_LIST, the id could be the user list db entity id, and the\n  //   user list db entity could contain a bunch of user ids. User needs\n  //   to be a member of the user list to be able to access the object.\n  // - for EMAIL_DOMAIN, the id could be the email domain, and the user needs\n  //   to have an email with the domain to be able to access the object.\n  // - for GROUP_MEMBER, the id could be the group db entity id, and the\n  //   group db entity could contain a bunch of user ids. User needs to be\n  //   a member of the group to be able to access the object.\n  // - for SUBSCRIBER, the id could be the subscriber db entity id, and the\n  //   subscriber db entity could contain a bunch of user ids. User needs to\n  //   be a subscriber to be able to access the object.\n  id: string;\n}\n\nexport enum ObjectPermission {\n  READ = \"read\",\n  WRITE = \"write\",\n}\n\nexport interface ObjectAclRule {\n  group: ObjectAccessGroup;\n  permission: ObjectPermission;\n}\n\n// The ACL policy of the object.\n// This would be set as part of the object custom metadata:\n// - key: \"custom:aclPolicy\"\n// - value: JSON string of the ObjectAclPolicy object.\nexport interface ObjectAclPolicy {\n  owner: string;\n  visibility: \"public\" | \"private\";\n  aclRules?: Array<ObjectAclRule>;\n}\n\n// Check if the requested permission is allowed based on the granted permission.\nfunction isPermissionAllowed(\n  requested: ObjectPermission,\n  granted: ObjectPermission,\n): boolean {\n  // Users granted with read or write permissions can read the object.\n  if (requested === ObjectPermission.READ) {\n    return [ObjectPermission.READ, ObjectPermission.WRITE].includes(granted);\n  }\n\n  // Only users granted with write permissions can write the object.\n  return granted === ObjectPermission.WRITE;\n}\n\n// The base class for all access groups.\n//\n// Different types of access groups can be implemented according to the use case.\nabstract class BaseObjectAccessGroup implements ObjectAccessGroup {\n  constructor(\n    public readonly type: ObjectAccessGroupType,\n    public readonly id: string,\n  ) {}\n\n  // Check if the user is a member of the group.\n  public abstract hasMember(userId: string): Promise<boolean>;\n}\n\nfunction createObjectAccessGroup(\n  group: ObjectAccessGroup,\n): BaseObjectAccessGroup {\n  switch (group.type) {\n    // Implement the case for each type of access group to instantiate.\n    //\n    // For example:\n    // case \"USER_LIST\":\n    //   return new UserListAccessGroup(group.id);\n    // case \"EMAIL_DOMAIN\":\n    //   return new EmailDomainAccessGroup(group.id);\n    // case \"GROUP_MEMBER\":\n    //   return new GroupMemberAccessGroup(group.id);\n    // case \"SUBSCRIBER\":\n    //   return new SubscriberAccessGroup(group.id);\n    default:\n      throw new Error(`Unknown access group type: ${group.type}`);\n  }\n}\n\n// Sets the ACL policy to the object metadata.\nexport async function setObjectAclPolicy(\n  objectFile: File,\n  aclPolicy: ObjectAclPolicy,\n): Promise<void> {\n  const [exists] = await objectFile.exists();\n  if (!exists) {\n    throw new Error(`Object not found: ${objectFile.name}`);\n  }\n\n  await objectFile.setMetadata({\n    metadata: {\n      [ACL_POLICY_METADATA_KEY]: JSON.stringify(aclPolicy),\n    },\n  });\n}\n\n// Gets the ACL policy from the object metadata.\nexport async function getObjectAclPolicy(\n  objectFile: File,\n): Promise<ObjectAclPolicy | null> {\n  const [metadata] = await objectFile.getMetadata();\n  const aclPolicy = metadata?.metadata?.[ACL_POLICY_METADATA_KEY];\n  if (!aclPolicy) {\n    return null;\n  }\n  return JSON.parse(aclPolicy as string);\n}\n\n// Checks if the user can access the object.\nexport async function canAccessObject({\n  userId,\n  objectFile,\n  requestedPermission,\n}: {\n  userId?: string;\n  objectFile: File;\n  requestedPermission: ObjectPermission;\n}): Promise<boolean> {\n  // When this function is called, the acl policy is required.\n  const aclPolicy = await getObjectAclPolicy(objectFile);\n  if (!aclPolicy) {\n    return false;\n  }\n\n  // Public objects are always accessible for read.\n  if (\n    aclPolicy.visibility === \"public\" &&\n    requestedPermission === ObjectPermission.READ\n  ) {\n    return true;\n  }\n\n  // Access control requires the user id.\n  if (!userId) {\n    return false;\n  }\n\n  // The owner of the object can always access it.\n  if (aclPolicy.owner === userId) {\n    return true;\n  }\n\n  // Go through the ACL rules to check if the user has the required permission.\n  for (const rule of aclPolicy.aclRules || []) {\n    const accessGroup = createObjectAccessGroup(rule.group);\n    if (\n      (await accessGroup.hasMember(userId)) &&\n      isPermissionAllowed(requestedPermission, rule.permission)\n    ) {\n      return true;\n    }\n  }\n\n  return false;\n}\n","size_bytes":5544},"server/objectStorage.ts":{"content":"import { Storage, File } from \"@google-cloud/storage\";\nimport { Response } from \"express\";\nimport { randomUUID } from \"crypto\";\nimport {\n  ObjectAclPolicy,\n  ObjectPermission,\n  canAccessObject,\n  getObjectAclPolicy,\n  setObjectAclPolicy,\n} from \"./objectAcl\";\n\nconst REPLIT_SIDECAR_ENDPOINT = \"http://127.0.0.1:1106\";\n\n// The object storage client is used to interact with the object storage service.\nexport const objectStorageClient = new Storage({\n  credentials: {\n    audience: \"replit\",\n    subject_token_type: \"access_token\",\n    token_url: `${REPLIT_SIDECAR_ENDPOINT}/token`,\n    type: \"external_account\",\n    credential_source: {\n      url: `${REPLIT_SIDECAR_ENDPOINT}/credential`,\n      format: {\n        type: \"json\",\n        subject_token_field_name: \"access_token\",\n      },\n    },\n    universe_domain: \"googleapis.com\",\n  },\n  projectId: \"\",\n});\n\nexport class ObjectNotFoundError extends Error {\n  constructor() {\n    super(\"Object not found\");\n    this.name = \"ObjectNotFoundError\";\n    Object.setPrototypeOf(this, ObjectNotFoundError.prototype);\n  }\n}\n\n// The object storage service is used to interact with the object storage service.\nexport class ObjectStorageService {\n  constructor() {}\n\n  // Gets the public object search paths.\n  getPublicObjectSearchPaths(): Array<string> {\n    const pathsStr = process.env.PUBLIC_OBJECT_SEARCH_PATHS || \"\";\n    const paths = Array.from(\n      new Set(\n        pathsStr\n          .split(\",\")\n          .map((path) => path.trim())\n          .filter((path) => path.length > 0)\n      )\n    );\n    if (paths.length === 0) {\n      throw new Error(\n        \"PUBLIC_OBJECT_SEARCH_PATHS not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PUBLIC_OBJECT_SEARCH_PATHS env var (comma-separated paths).\"\n      );\n    }\n    return paths;\n  }\n\n  // Gets the private object directory.\n  getPrivateObjectDir(): string {\n    const dir = process.env.PRIVATE_OBJECT_DIR || \"\";\n    if (!dir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n    return dir;\n  }\n\n  // Search for a public object from the search paths.\n  async searchPublicObject(filePath: string): Promise<File | null> {\n    for (const searchPath of this.getPublicObjectSearchPaths()) {\n      const fullPath = `${searchPath}/${filePath}`;\n\n      // Full path format: /<bucket_name>/<object_name>\n      const { bucketName, objectName } = parseObjectPath(fullPath);\n      const bucket = objectStorageClient.bucket(bucketName);\n      const file = bucket.file(objectName);\n\n      // Check if file exists\n      const [exists] = await file.exists();\n      if (exists) {\n        return file;\n      }\n    }\n\n    return null;\n  }\n\n  // Downloads an object to the response.\n  async downloadObject(file: File, res: Response, cacheTtlSec: number = 3600) {\n    try {\n      // Get file metadata\n      const [metadata] = await file.getMetadata();\n      // Get the ACL policy for the object.\n      const aclPolicy = await getObjectAclPolicy(file);\n      const isPublic = aclPolicy?.visibility === \"public\";\n      // Set appropriate headers\n      res.set({\n        \"Content-Type\": metadata.contentType || \"application/octet-stream\",\n        \"Content-Length\": metadata.size,\n        \"Cache-Control\": `${\n          isPublic ? \"public\" : \"private\"\n        }, max-age=${cacheTtlSec}`,\n      });\n\n      // Stream the file to the response\n      const stream = file.createReadStream();\n\n      stream.on(\"error\", (err) => {\n        console.error(\"Stream error:\", err);\n        if (!res.headersSent) {\n          res.status(500).json({ error: \"Error streaming file\" });\n        }\n      });\n\n      stream.pipe(res);\n    } catch (error) {\n      console.error(\"Error downloading file:\", error);\n      if (!res.headersSent) {\n        res.status(500).json({ error: \"Error downloading file\" });\n      }\n    }\n  }\n\n  // Gets the upload URL for an object entity.\n  async getObjectEntityUploadURL(): Promise<string> {\n    const privateObjectDir = this.getPrivateObjectDir();\n    if (!privateObjectDir) {\n      throw new Error(\n        \"PRIVATE_OBJECT_DIR not set. Create a bucket in 'Object Storage' \" +\n          \"tool and set PRIVATE_OBJECT_DIR env var.\"\n      );\n    }\n\n    const objectId = randomUUID();\n    const fullPath = `${privateObjectDir}/uploads/${objectId}`;\n\n    const { bucketName, objectName } = parseObjectPath(fullPath);\n\n    // Sign URL for PUT method with TTL\n    return signObjectURL({\n      bucketName,\n      objectName,\n      method: \"PUT\",\n      ttlSec: 900,\n    });\n  }\n\n  // Gets the object entity file from the object path.\n  async getObjectEntityFile(objectPath: string): Promise<File> {\n    if (!objectPath.startsWith(\"/objects/\")) {\n      throw new ObjectNotFoundError();\n    }\n\n    const parts = objectPath.slice(1).split(\"/\");\n    if (parts.length < 2) {\n      throw new ObjectNotFoundError();\n    }\n\n    const entityId = parts.slice(1).join(\"/\");\n    let entityDir = this.getPrivateObjectDir();\n    if (!entityDir.endsWith(\"/\")) {\n      entityDir = `${entityDir}/`;\n    }\n    const objectEntityPath = `${entityDir}${entityId}`;\n    const { bucketName, objectName } = parseObjectPath(objectEntityPath);\n    const bucket = objectStorageClient.bucket(bucketName);\n    const objectFile = bucket.file(objectName);\n    const [exists] = await objectFile.exists();\n    if (!exists) {\n      throw new ObjectNotFoundError();\n    }\n    return objectFile;\n  }\n\n  normalizeObjectEntityPath(\n    rawPath: string,\n  ): string {\n    if (!rawPath.startsWith(\"https://storage.googleapis.com/\")) {\n      return rawPath;\n    }\n  \n    // Extract the path from the URL by removing query parameters and domain\n    const url = new URL(rawPath);\n    const rawObjectPath = url.pathname;\n  \n    let objectEntityDir = this.getPrivateObjectDir();\n    if (!objectEntityDir.endsWith(\"/\")) {\n      objectEntityDir = `${objectEntityDir}/`;\n    }\n  \n    if (!rawObjectPath.startsWith(objectEntityDir)) {\n      return rawObjectPath;\n    }\n  \n    // Extract the entity ID from the path\n    const entityId = rawObjectPath.slice(objectEntityDir.length);\n    return `/objects/${entityId}`;\n  }\n\n  // Tries to set the ACL policy for the object entity and return the normalized path.\n  async trySetObjectEntityAclPolicy(\n    rawPath: string,\n    aclPolicy: ObjectAclPolicy\n  ): Promise<string> {\n    const normalizedPath = this.normalizeObjectEntityPath(rawPath);\n    if (!normalizedPath.startsWith(\"/\")) {\n      return normalizedPath;\n    }\n\n    const objectFile = await this.getObjectEntityFile(normalizedPath);\n    await setObjectAclPolicy(objectFile, aclPolicy);\n    return normalizedPath;\n  }\n\n  // Checks if the user can access the object entity.\n  async canAccessObjectEntity({\n    userId,\n    objectFile,\n    requestedPermission,\n  }: {\n    userId?: string;\n    objectFile: File;\n    requestedPermission?: ObjectPermission;\n  }): Promise<boolean> {\n    return canAccessObject({\n      userId,\n      objectFile,\n      requestedPermission: requestedPermission ?? ObjectPermission.READ,\n    });\n  }\n}\n\nfunction parseObjectPath(path: string): {\n  bucketName: string;\n  objectName: string;\n} {\n  if (!path.startsWith(\"/\")) {\n    path = `/${path}`;\n  }\n  const pathParts = path.split(\"/\");\n  if (pathParts.length < 3) {\n    throw new Error(\"Invalid path: must contain at least a bucket name\");\n  }\n\n  const bucketName = pathParts[1];\n  const objectName = pathParts.slice(2).join(\"/\");\n\n  return {\n    bucketName,\n    objectName,\n  };\n}\n\nasync function signObjectURL({\n  bucketName,\n  objectName,\n  method,\n  ttlSec,\n}: {\n  bucketName: string;\n  objectName: string;\n  method: \"GET\" | \"PUT\" | \"DELETE\" | \"HEAD\";\n  ttlSec: number;\n}): Promise<string> {\n  const request = {\n    bucket_name: bucketName,\n    object_name: objectName,\n    method,\n    expires_at: new Date(Date.now() + ttlSec * 1000).toISOString(),\n  };\n  const response = await fetch(\n    `${REPLIT_SIDECAR_ENDPOINT}/object-storage/signed-object-url`,\n    {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\",\n      },\n      body: JSON.stringify(request),\n    }\n  );\n  if (!response.ok) {\n    throw new Error(\n      `Failed to sign object URL, errorcode: ${response.status}, ` +\n        `make sure you're running on Replit`\n    );\n  }\n\n  const { signed_url: signedURL } = await response.json();\n  return signedURL;\n}\n","size_bytes":8408},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { WebSocketServer, WebSocket } from \"ws\";\nimport { storage } from \"./storage\";\nimport { ObjectStorageService, ObjectNotFoundError } from \"./objectStorage\";\nimport { ObjectPermission } from \"./objectAcl\";\nimport { insertFeedbackResponseSchema, insertQrCodeSchema, insertLocationSchema, insertSurveyTemplateSchema, insertAlertRuleSchema } from \"@shared/schema\";\nimport QRCode from \"qrcode\";\nimport { randomUUID } from \"crypto\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  const httpServer = createServer(app);\n\n  // WebSocket server for real-time features\n  const wss = new WebSocketServer({ server: httpServer, path: '/ws' });\n  \n  const clients = new Map<string, WebSocket>();\n\n  wss.on('connection', (ws, req) => {\n    const clientId = randomUUID();\n    clients.set(clientId, ws);\n\n    ws.on('message', (message) => {\n      try {\n        const data = JSON.parse(message.toString());\n        if (data.type === 'auth' && data.tenantId) {\n          // Associate client with tenant for targeted notifications\n          ws.tenantId = data.tenantId;\n        }\n      } catch (error) {\n        console.error('WebSocket message error:', error);\n      }\n    });\n\n    ws.on('close', () => {\n      clients.delete(clientId);\n    });\n  });\n\n  // Broadcast alert to all connected clients of a tenant\n  function broadcastAlert(tenantId: string, alert: any) {\n    clients.forEach((client) => {\n      if (client.readyState === WebSocket.OPEN && client.tenantId === tenantId) {\n        client.send(JSON.stringify({\n          type: 'alert',\n          data: alert\n        }));\n      }\n    });\n  }\n\n  // Demo tenant creation endpoint (in production, this would be part of registration flow)\n  app.post('/api/tenants', async (req, res) => {\n    try {\n      const tenant = await storage.createTenant(req.body);\n      \n      // Create default location\n      const defaultLocation = await storage.createLocation({\n        tenantId: tenant.id,\n        name: \"Main Location\",\n        address: \"123 Main St\",\n        city: \"Anytown\",\n        state: \"State\",\n        zipCode: \"12345\",\n        isActive: true\n      });\n\n      // Create default survey template\n      await storage.createSurveyTemplate({\n        tenantId: tenant.id,\n        name: \"Default Feedback Survey\",\n        description: \"Standard customer feedback form\",\n        industry: tenant.industry,\n        fields: [\n          { id: 'customer_name', type: 'text', label: 'Your Name', required: true },\n          { id: 'customer_email', type: 'email', label: 'Email (Optional)', required: false },\n          { id: 'overall_rating', type: 'rating', label: 'Overall Rating', required: true, max: 5 },\n          { id: 'feedback_text', type: 'textarea', label: 'Your Feedback', required: false }\n        ],\n        isDefault: true,\n        isActive: true\n      });\n\n      res.json(tenant);\n    } catch (error) {\n      console.error('Error creating tenant:', error);\n      res.status(500).json({ error: 'Failed to create tenant' });\n    }\n  });\n\n  // Get tenant with locations and metrics\n  app.get('/api/tenants/:id', async (req, res) => {\n    try {\n      const tenant = await storage.getTenant(req.params.id);\n      if (!tenant) {\n        return res.status(404).json({ error: 'Tenant not found' });\n      }\n\n      const locations = await storage.getLocationsByTenant(tenant.id);\n      const metrics = await storage.getTenantMetrics(tenant.id);\n\n      res.json({\n        ...tenant,\n        locations,\n        metrics\n      });\n    } catch (error) {\n      console.error('Error fetching tenant:', error);\n      res.status(500).json({ error: 'Failed to fetch tenant' });\n    }\n  });\n\n  // Analytics endpoints\n  app.get('/api/analytics/metrics/:tenantId', async (req, res) => {\n    try {\n      const metrics = await storage.getTenantMetrics(req.params.tenantId);\n      res.json(metrics);\n    } catch (error) {\n      console.error('Error fetching metrics:', error);\n      res.status(500).json({ error: 'Failed to fetch metrics' });\n    }\n  });\n\n  app.get('/api/analytics/trends/:tenantId', async (req, res) => {\n    try {\n      const days = parseInt(req.query.days as string) || 7;\n      const trends = await storage.getFeedbackTrends(req.params.tenantId, days);\n      res.json(trends);\n    } catch (error) {\n      console.error('Error fetching trends:', error);\n      res.status(500).json({ error: 'Failed to fetch trends' });\n    }\n  });\n\n  // Feedback endpoints\n  app.get('/api/feedback/:tenantId', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 50;\n      const feedback = await storage.getFeedbackResponsesByTenant(req.params.tenantId, limit);\n      res.json(feedback);\n    } catch (error) {\n      console.error('Error fetching feedback:', error);\n      res.status(500).json({ error: 'Failed to fetch feedback' });\n    }\n  });\n\n  app.post('/api/feedback', async (req, res) => {\n    try {\n      const validatedData = insertFeedbackResponseSchema.parse(req.body);\n      const feedback = await storage.createFeedbackResponse(validatedData);\n\n      // Check for alert conditions and trigger if necessary\n      if (feedback.overallRating <= 2) {\n        const alert = await storage.createAlertNotification({\n          tenantId: feedback.tenantId,\n          alertRuleId: '', // In production, this would reference actual alert rules\n          feedbackId: feedback.id,\n          title: 'Low Rating Alert',\n          message: `Customer gave a rating of ${feedback.overallRating}/5 for ${feedback.qrCodeId ? 'QR location' : 'general feedback'}`,\n          severity: 'critical'\n        });\n\n        // Broadcast real-time alert\n        broadcastAlert(feedback.tenantId, alert);\n      }\n\n      res.json(feedback);\n    } catch (error) {\n      console.error('Error creating feedback:', error);\n      res.status(500).json({ error: 'Failed to create feedback' });\n    }\n  });\n\n  // QR Code endpoints\n  app.get('/api/qr-codes/:tenantId', async (req, res) => {\n    try {\n      const qrCodes = await storage.getQrCodesByTenant(req.params.tenantId);\n      \n      // Enhance with analytics data\n      const enhancedQrCodes = await Promise.all(\n        qrCodes.map(async (qr) => {\n          const analytics = await storage.getQrAnalytics(qr.id, 1); // Today's scans\n          const allAnalytics = await storage.getQrAnalytics(qr.id, 30); // Last 30 days\n          \n          return {\n            ...qr,\n            scansToday: analytics.length,\n            totalScans: allAnalytics.length,\n            completionRate: allAnalytics.length > 0 ? \n              Math.round((allAnalytics.filter(a => a.completedFeedback).length / allAnalytics.length) * 100) : 0\n          };\n        })\n      );\n\n      res.json(enhancedQrCodes);\n    } catch (error) {\n      console.error('Error fetching QR codes:', error);\n      res.status(500).json({ error: 'Failed to fetch QR codes' });\n    }\n  });\n\n  app.post('/api/qr-codes', async (req, res) => {\n    try {\n      const { tenantId, locationId, identifier, section } = req.body;\n      \n      // Generate QR data URL\n      const qrData = `${process.env.FRONTEND_URL || 'http://localhost:5000'}/feedback?t=${tenantId}&l=${locationId}&q=${randomUUID()}`;\n      \n      // Generate QR code image\n      const qrImageData = await QRCode.toDataURL(qrData, {\n        width: 300,\n        margin: 2,\n        color: {\n          dark: '#000000',\n          light: '#FFFFFF'\n        }\n      });\n\n      const qrCode = await storage.createQrCode({\n        tenantId,\n        locationId,\n        identifier,\n        section,\n        qrData,\n        qrImageUrl: qrImageData, // In production, this would be uploaded to object storage\n        isActive: true\n      });\n\n      res.json(qrCode);\n    } catch (error) {\n      console.error('Error creating QR code:', error);\n      res.status(500).json({ error: 'Failed to create QR code' });\n    }\n  });\n\n  // Track QR code scan\n  app.post('/api/qr-codes/:id/scan', async (req, res) => {\n    try {\n      const qrCode = await storage.getQrCode(req.params.id);\n      if (!qrCode) {\n        return res.status(404).json({ error: 'QR code not found' });\n      }\n\n      await storage.trackQrScan(\n        qrCode.id,\n        qrCode.tenantId,\n        req.ip,\n        req.get('User-Agent')\n      );\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error('Error tracking QR scan:', error);\n      res.status(500).json({ error: 'Failed to track QR scan' });\n    }\n  });\n\n  // Location endpoints\n  app.get('/api/locations/:tenantId', async (req, res) => {\n    try {\n      const locations = await storage.getLocationsByTenant(req.params.tenantId);\n      res.json(locations);\n    } catch (error) {\n      console.error('Error fetching locations:', error);\n      res.status(500).json({ error: 'Failed to fetch locations' });\n    }\n  });\n\n  app.post('/api/locations', async (req, res) => {\n    try {\n      const validatedData = insertLocationSchema.parse(req.body);\n      const location = await storage.createLocation(validatedData);\n      res.json(location);\n    } catch (error) {\n      console.error('Error creating location:', error);\n      res.status(500).json({ error: 'Failed to create location' });\n    }\n  });\n\n  // Survey template endpoints\n  app.get('/api/survey-templates/:tenantId', async (req, res) => {\n    try {\n      const templates = await storage.getSurveyTemplatesByTenant(req.params.tenantId);\n      res.json(templates);\n    } catch (error) {\n      console.error('Error fetching survey templates:', error);\n      res.status(500).json({ error: 'Failed to fetch survey templates' });\n    }\n  });\n\n  app.post('/api/survey-templates', async (req, res) => {\n    try {\n      const validatedData = insertSurveyTemplateSchema.parse(req.body);\n      const template = await storage.createSurveyTemplate(validatedData);\n      res.json(template);\n    } catch (error) {\n      console.error('Error creating survey template:', error);\n      res.status(500).json({ error: 'Failed to create survey template' });\n    }\n  });\n\n  // Alert endpoints\n  app.get('/api/alerts/:tenantId', async (req, res) => {\n    try {\n      const limit = parseInt(req.query.limit as string) || 10;\n      const alerts = await storage.getAlertNotificationsByTenant(req.params.tenantId, limit);\n      res.json(alerts);\n    } catch (error) {\n      console.error('Error fetching alerts:', error);\n      res.status(500).json({ error: 'Failed to fetch alerts' });\n    }\n  });\n\n  app.post('/api/alert-rules', async (req, res) => {\n    try {\n      const validatedData = insertAlertRuleSchema.parse(req.body);\n      const rule = await storage.createAlertRule(validatedData);\n      res.json(rule);\n    } catch (error) {\n      console.error('Error creating alert rule:', error);\n      res.status(500).json({ error: 'Failed to create alert rule' });\n    }\n  });\n\n  // Mark alert as read\n  app.patch('/api/alerts/:id/read', async (req, res) => {\n    try {\n      const alert = await storage.updateAlertNotification(req.params.id, { isRead: true });\n      res.json(alert);\n    } catch (error) {\n      console.error('Error updating alert:', error);\n      res.status(500).json({ error: 'Failed to update alert' });\n    }\n  });\n\n  // Object storage endpoints for file uploads\n  const objectStorage = new ObjectStorageService();\n\n  app.get(\"/objects/:objectPath(*)\", async (req, res) => {\n    try {\n      const objectFile = await objectStorage.getObjectEntityFile(req.path);\n      objectStorage.downloadObject(objectFile, res);\n    } catch (error) {\n      console.error(\"Error accessing object:\", error);\n      if (error instanceof ObjectNotFoundError) {\n        return res.sendStatus(404);\n      }\n      return res.sendStatus(500);\n    }\n  });\n\n  app.post(\"/api/objects/upload\", async (req, res) => {\n    try {\n      const uploadURL = await objectStorage.getObjectEntityUploadURL();\n      res.json({ uploadURL });\n    } catch (error) {\n      console.error(\"Error generating upload URL:\", error);\n      res.status(500).json({ error: \"Failed to generate upload URL\" });\n    }\n  });\n\n  // Update feedback with uploaded files\n  app.put(\"/api/feedback/:id/files\", async (req, res) => {\n    try {\n      const { voiceRecordingURL, imageURLs } = req.body;\n      \n      const updates: any = {};\n      \n      if (voiceRecordingURL) {\n        const voiceObjectPath = objectStorage.normalizeObjectEntityPath(voiceRecordingURL);\n        updates.voiceRecordingUrl = voiceObjectPath;\n      }\n      \n      if (imageURLs && Array.isArray(imageURLs)) {\n        const normalizedImageURLs = imageURLs.map(url => \n          objectStorage.normalizeObjectEntityPath(url)\n        );\n        updates.imageUrls = normalizedImageURLs;\n      }\n\n      const feedback = await storage.updateFeedbackResponse(req.params.id, updates);\n      res.json(feedback);\n    } catch (error) {\n      console.error(\"Error updating feedback files:\", error);\n      res.status(500).json({ error: \"Failed to update feedback files\" });\n    }\n  });\n\n  return httpServer;\n}\n","size_bytes":13025},"server/storage.ts":{"content":"import {\n  tenants,\n  users,\n  locations,\n  surveyTemplates,\n  qrCodes,\n  feedbackResponses,\n  alertRules,\n  alertNotifications,\n  qrAnalytics,\n  type Tenant,\n  type InsertTenant,\n  type User,\n  type InsertUser,\n  type Location,\n  type InsertLocation,\n  type SurveyTemplate,\n  type InsertSurveyTemplate,\n  type QrCode,\n  type InsertQrCode,\n  type FeedbackResponse,\n  type InsertFeedbackResponse,\n  type AlertRule,\n  type InsertAlertRule,\n  type AlertNotification,\n  type InsertAlertNotification,\n  type QrAnalytic,\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, count, avg, sql } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // Tenant operations\n  getTenant(id: string): Promise<Tenant | undefined>;\n  createTenant(tenant: InsertTenant): Promise<Tenant>;\n  updateTenant(id: string, tenant: Partial<InsertTenant>): Promise<Tenant>;\n\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: string, user: Partial<InsertUser>): Promise<User>;\n  getUsersByTenant(tenantId: string): Promise<User[]>;\n\n  // Location operations\n  getLocation(id: string): Promise<Location | undefined>;\n  createLocation(location: InsertLocation): Promise<Location>;\n  updateLocation(id: string, location: Partial<InsertLocation>): Promise<Location>;\n  getLocationsByTenant(tenantId: string): Promise<Location[]>;\n\n  // Survey Template operations\n  getSurveyTemplate(id: string): Promise<SurveyTemplate | undefined>;\n  createSurveyTemplate(template: InsertSurveyTemplate): Promise<SurveyTemplate>;\n  updateSurveyTemplate(id: string, template: Partial<InsertSurveyTemplate>): Promise<SurveyTemplate>;\n  getSurveyTemplatesByTenant(tenantId: string): Promise<SurveyTemplate[]>;\n\n  // QR Code operations\n  getQrCode(id: string): Promise<QrCode | undefined>;\n  createQrCode(qrCode: InsertQrCode): Promise<QrCode>;\n  updateQrCode(id: string, qrCode: Partial<InsertQrCode>): Promise<QrCode>;\n  getQrCodesByTenant(tenantId: string): Promise<QrCode[]>;\n  getQrCodesByLocation(locationId: string): Promise<QrCode[]>;\n\n  // Feedback operations\n  getFeedbackResponse(id: string): Promise<FeedbackResponse | undefined>;\n  createFeedbackResponse(feedback: InsertFeedbackResponse): Promise<FeedbackResponse>;\n  updateFeedbackResponse(id: string, feedback: Partial<InsertFeedbackResponse>): Promise<FeedbackResponse>;\n  getFeedbackResponsesByTenant(tenantId: string, limit?: number): Promise<FeedbackResponse[]>;\n  getFeedbackResponsesByLocation(locationId: string, limit?: number): Promise<FeedbackResponse[]>;\n\n  // Analytics operations\n  getTenantMetrics(tenantId: string): Promise<{\n    averageRating: number;\n    totalResponses: number;\n    criticalAlerts: number;\n    qrScansToday: number;\n  }>;\n  getFeedbackTrends(tenantId: string, days: number): Promise<Array<{\n    date: string;\n    averageRating: number;\n    responseCount: number;\n  }>>;\n\n  // Alert operations\n  getAlertRule(id: string): Promise<AlertRule | undefined>;\n  createAlertRule(rule: InsertAlertRule): Promise<AlertRule>;\n  updateAlertRule(id: string, rule: Partial<InsertAlertRule>): Promise<AlertRule>;\n  getAlertRulesByTenant(tenantId: string): Promise<AlertRule[]>;\n\n  getAlertNotification(id: string): Promise<AlertNotification | undefined>;\n  createAlertNotification(notification: InsertAlertNotification): Promise<AlertNotification>;\n  updateAlertNotification(id: string, notification: Partial<InsertAlertNotification>): Promise<AlertNotification>;\n  getAlertNotificationsByTenant(tenantId: string, limit?: number): Promise<AlertNotification[]>;\n\n  // QR Analytics operations\n  trackQrScan(qrCodeId: string, tenantId: string, ipAddress?: string, userAgent?: string): Promise<void>;\n  getQrAnalytics(qrCodeId: string, days?: number): Promise<QrAnalytic[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // Tenant operations\n  async getTenant(id: string): Promise<Tenant | undefined> {\n    const [tenant] = await db.select().from(tenants).where(eq(tenants.id, id));\n    return tenant;\n  }\n\n  async createTenant(tenant: InsertTenant): Promise<Tenant> {\n    const [newTenant] = await db.insert(tenants).values(tenant).returning();\n    return newTenant;\n  }\n\n  async updateTenant(id: string, tenant: Partial<InsertTenant>): Promise<Tenant> {\n    const [updatedTenant] = await db\n      .update(tenants)\n      .set({ ...tenant, updatedAt: new Date() })\n      .where(eq(tenants.id, id))\n      .returning();\n    return updatedTenant;\n  }\n\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values(user).returning();\n    return newUser;\n  }\n\n  async updateUser(id: string, user: Partial<InsertUser>): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser;\n  }\n\n  async getUsersByTenant(tenantId: string): Promise<User[]> {\n    return await db.select().from(users).where(eq(users.tenantId, tenantId));\n  }\n\n  // Location operations\n  async getLocation(id: string): Promise<Location | undefined> {\n    const [location] = await db.select().from(locations).where(eq(locations.id, id));\n    return location;\n  }\n\n  async createLocation(location: InsertLocation): Promise<Location> {\n    const [newLocation] = await db.insert(locations).values(location).returning();\n    return newLocation;\n  }\n\n  async updateLocation(id: string, location: Partial<InsertLocation>): Promise<Location> {\n    const [updatedLocation] = await db\n      .update(locations)\n      .set({ ...location, updatedAt: new Date() })\n      .where(eq(locations.id, id))\n      .returning();\n    return updatedLocation;\n  }\n\n  async getLocationsByTenant(tenantId: string): Promise<Location[]> {\n    return await db.select().from(locations).where(eq(locations.tenantId, tenantId));\n  }\n\n  // Survey Template operations\n  async getSurveyTemplate(id: string): Promise<SurveyTemplate | undefined> {\n    const [template] = await db.select().from(surveyTemplates).where(eq(surveyTemplates.id, id));\n    return template;\n  }\n\n  async createSurveyTemplate(template: InsertSurveyTemplate): Promise<SurveyTemplate> {\n    const [newTemplate] = await db.insert(surveyTemplates).values(template).returning();\n    return newTemplate;\n  }\n\n  async updateSurveyTemplate(id: string, template: Partial<InsertSurveyTemplate>): Promise<SurveyTemplate> {\n    const [updatedTemplate] = await db\n      .update(surveyTemplates)\n      .set({ ...template, updatedAt: new Date() })\n      .where(eq(surveyTemplates.id, id))\n      .returning();\n    return updatedTemplate;\n  }\n\n  async getSurveyTemplatesByTenant(tenantId: string): Promise<SurveyTemplate[]> {\n    return await db.select().from(surveyTemplates).where(eq(surveyTemplates.tenantId, tenantId));\n  }\n\n  // QR Code operations\n  async getQrCode(id: string): Promise<QrCode | undefined> {\n    const [qrCode] = await db.select().from(qrCodes).where(eq(qrCodes.id, id));\n    return qrCode;\n  }\n\n  async createQrCode(qrCode: InsertQrCode): Promise<QrCode> {\n    const [newQrCode] = await db.insert(qrCodes).values(qrCode).returning();\n    return newQrCode;\n  }\n\n  async updateQrCode(id: string, qrCode: Partial<InsertQrCode>): Promise<QrCode> {\n    const [updatedQrCode] = await db\n      .update(qrCodes)\n      .set({ ...qrCode, updatedAt: new Date() })\n      .where(eq(qrCodes.id, id))\n      .returning();\n    return updatedQrCode;\n  }\n\n  async getQrCodesByTenant(tenantId: string): Promise<QrCode[]> {\n    return await db.select().from(qrCodes).where(eq(qrCodes.tenantId, tenantId));\n  }\n\n  async getQrCodesByLocation(locationId: string): Promise<QrCode[]> {\n    return await db.select().from(qrCodes).where(eq(qrCodes.locationId, locationId));\n  }\n\n  // Feedback operations\n  async getFeedbackResponse(id: string): Promise<FeedbackResponse | undefined> {\n    const [feedback] = await db.select().from(feedbackResponses).where(eq(feedbackResponses.id, id));\n    return feedback;\n  }\n\n  async createFeedbackResponse(feedback: InsertFeedbackResponse): Promise<FeedbackResponse> {\n    const [newFeedback] = await db.insert(feedbackResponses).values(feedback).returning();\n    return newFeedback;\n  }\n\n  async updateFeedbackResponse(id: string, feedback: Partial<InsertFeedbackResponse>): Promise<FeedbackResponse> {\n    const [updatedFeedback] = await db\n      .update(feedbackResponses)\n      .set({ ...feedback, updatedAt: new Date() })\n      .where(eq(feedbackResponses.id, id))\n      .returning();\n    return updatedFeedback;\n  }\n\n  async getFeedbackResponsesByTenant(tenantId: string, limit = 50): Promise<FeedbackResponse[]> {\n    return await db\n      .select()\n      .from(feedbackResponses)\n      .where(eq(feedbackResponses.tenantId, tenantId))\n      .orderBy(desc(feedbackResponses.createdAt))\n      .limit(limit);\n  }\n\n  async getFeedbackResponsesByLocation(locationId: string, limit = 50): Promise<FeedbackResponse[]> {\n    return await db\n      .select()\n      .from(feedbackResponses)\n      .where(eq(feedbackResponses.locationId, locationId))\n      .orderBy(desc(feedbackResponses.createdAt))\n      .limit(limit);\n  }\n\n  // Analytics operations\n  async getTenantMetrics(tenantId: string): Promise<{\n    averageRating: number;\n    totalResponses: number;\n    criticalAlerts: number;\n    qrScansToday: number;\n  }> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n\n    const [avgRating] = await db\n      .select({ avg: avg(feedbackResponses.overallRating) })\n      .from(feedbackResponses)\n      .where(eq(feedbackResponses.tenantId, tenantId));\n\n    const [totalResponses] = await db\n      .select({ count: count() })\n      .from(feedbackResponses)\n      .where(eq(feedbackResponses.tenantId, tenantId));\n\n    const [criticalAlerts] = await db\n      .select({ count: count() })\n      .from(alertNotifications)\n      .where(\n        and(\n          eq(alertNotifications.tenantId, tenantId),\n          eq(alertNotifications.severity, \"critical\"),\n          eq(alertNotifications.isRead, false)\n        )\n      );\n\n    const [qrScansToday] = await db\n      .select({ count: count() })\n      .from(qrAnalytics)\n      .where(\n        and(\n          eq(qrAnalytics.tenantId, tenantId),\n          sql`${qrAnalytics.scannedAt} >= ${today}`\n        )\n      );\n\n    return {\n      averageRating: Number(avgRating.avg || 0),\n      totalResponses: totalResponses.count,\n      criticalAlerts: criticalAlerts.count,\n      qrScansToday: qrScansToday.count,\n    };\n  }\n\n  async getFeedbackTrends(tenantId: string, days = 7): Promise<Array<{\n    date: string;\n    averageRating: number;\n    responseCount: number;\n  }>> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    const trends = await db\n      .select({\n        date: sql<string>`DATE(${feedbackResponses.createdAt})`,\n        averageRating: avg(feedbackResponses.overallRating),\n        responseCount: count(),\n      })\n      .from(feedbackResponses)\n      .where(\n        and(\n          eq(feedbackResponses.tenantId, tenantId),\n          sql`${feedbackResponses.createdAt} >= ${startDate}`\n        )\n      )\n      .groupBy(sql`DATE(${feedbackResponses.createdAt})`)\n      .orderBy(sql`DATE(${feedbackResponses.createdAt})`);\n\n    return trends.map(trend => ({\n      date: trend.date,\n      averageRating: Number(trend.averageRating || 0),\n      responseCount: trend.responseCount,\n    }));\n  }\n\n  // Alert operations\n  async getAlertRule(id: string): Promise<AlertRule | undefined> {\n    const [rule] = await db.select().from(alertRules).where(eq(alertRules.id, id));\n    return rule;\n  }\n\n  async createAlertRule(rule: InsertAlertRule): Promise<AlertRule> {\n    const [newRule] = await db.insert(alertRules).values(rule).returning();\n    return newRule;\n  }\n\n  async updateAlertRule(id: string, rule: Partial<InsertAlertRule>): Promise<AlertRule> {\n    const [updatedRule] = await db\n      .update(alertRules)\n      .set({ ...rule, updatedAt: new Date() })\n      .where(eq(alertRules.id, id))\n      .returning();\n    return updatedRule;\n  }\n\n  async getAlertRulesByTenant(tenantId: string): Promise<AlertRule[]> {\n    return await db.select().from(alertRules).where(eq(alertRules.tenantId, tenantId));\n  }\n\n  async getAlertNotification(id: string): Promise<AlertNotification | undefined> {\n    const [notification] = await db.select().from(alertNotifications).where(eq(alertNotifications.id, id));\n    return notification;\n  }\n\n  async createAlertNotification(notification: InsertAlertNotification): Promise<AlertNotification> {\n    const [newNotification] = await db.insert(alertNotifications).values(notification).returning();\n    return newNotification;\n  }\n\n  async updateAlertNotification(id: string, notification: Partial<InsertAlertNotification>): Promise<AlertNotification> {\n    const [updatedNotification] = await db\n      .update(alertNotifications)\n      .set(notification)\n      .where(eq(alertNotifications.id, id))\n      .returning();\n    return updatedNotification;\n  }\n\n  async getAlertNotificationsByTenant(tenantId: string, limit = 10): Promise<AlertNotification[]> {\n    return await db\n      .select()\n      .from(alertNotifications)\n      .where(eq(alertNotifications.tenantId, tenantId))\n      .orderBy(desc(alertNotifications.createdAt))\n      .limit(limit);\n  }\n\n  // QR Analytics operations\n  async trackQrScan(qrCodeId: string, tenantId: string, ipAddress?: string, userAgent?: string): Promise<void> {\n    await db.insert(qrAnalytics).values({\n      qrCodeId,\n      tenantId,\n      ipAddress,\n      userAgent,\n    });\n  }\n\n  async getQrAnalytics(qrCodeId: string, days = 30): Promise<QrAnalytic[]> {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n\n    return await db\n      .select()\n      .from(qrAnalytics)\n      .where(\n        and(\n          eq(qrAnalytics.qrCodeId, qrCodeId),\n          sql`${qrAnalytics.scannedAt} >= ${startDate}`\n        )\n      )\n      .orderBy(desc(qrAnalytics.scannedAt));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":14462},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport {\n  pgTable,\n  varchar,\n  text,\n  timestamp,\n  integer,\n  decimal,\n  boolean,\n  jsonb,\n  uuid,\n  index,\n} from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Session storage table for authentication\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// Tenants (Business organizations)\nexport const tenants = pgTable(\"tenants\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  companyName: varchar(\"company_name\", { length: 255 }).notNull(),\n  industry: varchar(\"industry\", { length: 100 }).notNull(),\n  contactEmail: varchar(\"contact_email\", { length: 255 }).notNull(),\n  contactPhone: varchar(\"contact_phone\", { length: 50 }),\n  website: varchar(\"website\", { length: 255 }),\n  logo: varchar(\"logo\", { length: 500 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Users (Business users who manage the platform)\nexport const users = pgTable(\"users\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  email: varchar(\"email\", { length: 255 }).unique().notNull(),\n  firstName: varchar(\"first_name\", { length: 100 }),\n  lastName: varchar(\"last_name\", { length: 100 }),\n  profileImageUrl: varchar(\"profile_image_url\", { length: 500 }),\n  role: varchar(\"role\", { length: 50 }).default(\"admin\"),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Locations (Branches, stores, hospitals, etc.)\nexport const locations = pgTable(\"locations\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  address: text(\"address\"),\n  city: varchar(\"city\", { length: 100 }),\n  state: varchar(\"state\", { length: 100 }),\n  zipCode: varchar(\"zip_code\", { length: 20 }),\n  phone: varchar(\"phone\", { length: 50 }),\n  email: varchar(\"email\", { length: 255 }),\n  managerId: uuid(\"manager_id\").references(() => users.id),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Survey templates\nexport const surveyTemplates = pgTable(\"survey_templates\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  industry: varchar(\"industry\", { length: 100 }),\n  fields: jsonb(\"fields\").notNull(), // Array of field definitions\n  isDefault: boolean(\"is_default\").default(false),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// QR Codes for tables/beds/locations\nexport const qrCodes = pgTable(\"qr_codes\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  locationId: uuid(\"location_id\").references(() => locations.id).notNull(),\n  identifier: varchar(\"identifier\", { length: 100 }).notNull(), // Table 12, Bed 3, etc.\n  section: varchar(\"section\", { length: 100 }), // Patio, VIP, ICU, etc.\n  qrData: text(\"qr_data\").notNull(), // Encoded QR data\n  qrImageUrl: varchar(\"qr_image_url\", { length: 500 }),\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Feedback responses\nexport const feedbackResponses = pgTable(\"feedback_responses\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  locationId: uuid(\"location_id\").references(() => locations.id).notNull(),\n  qrCodeId: uuid(\"qr_code_id\").references(() => qrCodes.id),\n  customerName: varchar(\"customer_name\", { length: 255 }),\n  customerEmail: varchar(\"customer_email\", { length: 255 }),\n  customerPhone: varchar(\"customer_phone\", { length: 50 }),\n  overallRating: integer(\"overall_rating\").notNull(),\n  feedbackText: text(\"feedback_text\"),\n  customFields: jsonb(\"custom_fields\"), // Dynamic custom field responses\n  voiceRecordingUrl: varchar(\"voice_recording_url\", { length: 500 }),\n  imageUrls: jsonb(\"image_urls\"), // Array of image URLs\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  userAgent: text(\"user_agent\"),\n  responseTime: integer(\"response_time\"), // Time taken to complete in seconds\n  isPublic: boolean(\"is_public\").default(false),\n  tags: jsonb(\"tags\"), // Array of tags for categorization\n  sentiment: varchar(\"sentiment\", { length: 50 }), // positive, negative, neutral\n  sentimentScore: decimal(\"sentiment_score\", { precision: 5, scale: 4 }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// QR Code analytics\nexport const qrAnalytics = pgTable(\"qr_analytics\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  qrCodeId: uuid(\"qr_code_id\").references(() => qrCodes.id).notNull(),\n  scannedAt: timestamp(\"scanned_at\").defaultNow(),\n  ipAddress: varchar(\"ip_address\", { length: 45 }),\n  userAgent: text(\"user_agent\"),\n  completedFeedback: boolean(\"completed_feedback\").default(false),\n  feedbackId: uuid(\"feedback_id\").references(() => feedbackResponses.id),\n});\n\n// Alert rules\nexport const alertRules = pgTable(\"alert_rules\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  name: varchar(\"name\", { length: 255 }).notNull(),\n  description: text(\"description\"),\n  conditions: jsonb(\"conditions\").notNull(), // Rule conditions\n  actions: jsonb(\"actions\").notNull(), // What to do when triggered\n  isActive: boolean(\"is_active\").default(true),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// Alert notifications\nexport const alertNotifications = pgTable(\"alert_notifications\", {\n  id: uuid(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  tenantId: uuid(\"tenant_id\").references(() => tenants.id).notNull(),\n  alertRuleId: uuid(\"alert_rule_id\").references(() => alertRules.id).notNull(),\n  feedbackId: uuid(\"feedback_id\").references(() => feedbackResponses.id),\n  title: varchar(\"title\", { length: 255 }).notNull(),\n  message: text(\"message\").notNull(),\n  severity: varchar(\"severity\", { length: 50 }).notNull(), // critical, warning, info\n  isRead: boolean(\"is_read\").default(false),\n  isAcknowledged: boolean(\"is_acknowledged\").default(false),\n  acknowledgedBy: uuid(\"acknowledged_by\").references(() => users.id),\n  acknowledgedAt: timestamp(\"acknowledged_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// Define relations\nexport const tenantRelations = relations(tenants, ({ many }) => ({\n  users: many(users),\n  locations: many(locations),\n  surveyTemplates: many(surveyTemplates),\n  qrCodes: many(qrCodes),\n  feedbackResponses: many(feedbackResponses),\n  alertRules: many(alertRules),\n}));\n\nexport const userRelations = relations(users, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [users.tenantId],\n    references: [tenants.id],\n  }),\n}));\n\nexport const locationRelations = relations(locations, ({ one, many }) => ({\n  tenant: one(tenants, {\n    fields: [locations.tenantId],\n    references: [tenants.id],\n  }),\n  manager: one(users, {\n    fields: [locations.managerId],\n    references: [users.id],\n  }),\n  qrCodes: many(qrCodes),\n  feedbackResponses: many(feedbackResponses),\n}));\n\nexport const qrCodeRelations = relations(qrCodes, ({ one, many }) => ({\n  tenant: one(tenants, {\n    fields: [qrCodes.tenantId],\n    references: [tenants.id],\n  }),\n  location: one(locations, {\n    fields: [qrCodes.locationId],\n    references: [locations.id],\n  }),\n  feedbackResponses: many(feedbackResponses),\n  analytics: many(qrAnalytics),\n}));\n\nexport const feedbackResponseRelations = relations(feedbackResponses, ({ one }) => ({\n  tenant: one(tenants, {\n    fields: [feedbackResponses.tenantId],\n    references: [tenants.id],\n  }),\n  location: one(locations, {\n    fields: [feedbackResponses.locationId],\n    references: [locations.id],\n  }),\n  qrCode: one(qrCodes, {\n    fields: [feedbackResponses.qrCodeId],\n    references: [qrCodes.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertTenantSchema = createInsertSchema(tenants).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLocationSchema = createInsertSchema(locations).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSurveyTemplateSchema = createInsertSchema(surveyTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertQrCodeSchema = createInsertSchema(qrCodes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertFeedbackResponseSchema = createInsertSchema(feedbackResponses).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAlertRuleSchema = createInsertSchema(alertRules).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertAlertNotificationSchema = createInsertSchema(alertNotifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type Tenant = typeof tenants.$inferSelect;\nexport type InsertTenant = z.infer<typeof insertTenantSchema>;\n\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type Location = typeof locations.$inferSelect;\nexport type InsertLocation = z.infer<typeof insertLocationSchema>;\n\nexport type SurveyTemplate = typeof surveyTemplates.$inferSelect;\nexport type InsertSurveyTemplate = z.infer<typeof insertSurveyTemplateSchema>;\n\nexport type QrCode = typeof qrCodes.$inferSelect;\nexport type InsertQrCode = z.infer<typeof insertQrCodeSchema>;\n\nexport type FeedbackResponse = typeof feedbackResponses.$inferSelect;\nexport type InsertFeedbackResponse = z.infer<typeof insertFeedbackResponseSchema>;\n\nexport type AlertRule = typeof alertRules.$inferSelect;\nexport type InsertAlertRule = z.infer<typeof insertAlertRuleSchema>;\n\nexport type AlertNotification = typeof alertNotifications.$inferSelect;\nexport type InsertAlertNotification = z.infer<typeof insertAlertNotificationSchema>;\n\nexport type QrAnalytic = typeof qrAnalytics.$inferSelect;\n","size_bytes":10947},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport Dashboard from \"@/pages/dashboard\";\nimport FeedbackForm from \"@/pages/feedback\";\nimport SurveyBuilder from \"@/pages/survey-builder\";\nimport QRManagement from \"@/pages/qr-management\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Dashboard} />\n      <Route path=\"/feedback\" component={FeedbackForm} />\n      <Route path=\"/survey-builder\" component={SurveyBuilder} />\n      <Route path=\"/qr-management\" component={QRManagement} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1047},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}","size_bytes":1681},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/DashboardHeader.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Bell, MessageSquare } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\n\nconst DEMO_TENANT_ID = \"demo-tenant-001\";\n\nexport default function DashboardHeader() {\n  const { data: tenant } = useQuery({\n    queryKey: ['/api/tenants', DEMO_TENANT_ID],\n  });\n\n  const { data: alerts } = useQuery({\n    queryKey: ['/api/alerts', DEMO_TENANT_ID],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const unreadAlerts = alerts?.filter((alert: any) => !alert.isRead) || [];\n\n  return (\n    <header className=\"bg-white border-b border-gray-200\">\n      <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"flex justify-between items-center py-4\">\n          <div className=\"flex items-center space-x-4\">\n            <div className=\"w-10 h-10 bg-primary rounded-lg flex items-center justify-center\">\n              <MessageSquare className=\"text-white\" size={24} />\n            </div>\n            <div>\n              <h1 className=\"text-2xl font-bold text-gray-900\">FeedbackPlatform</h1>\n              <p className=\"text-sm text-gray-500\">\n                {tenant?.companyName || \"Loading...\"}\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex items-center space-x-4\">\n            {/* Real-time Alert Badge */}\n            <div className=\"relative\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"p-2\">\n                <Bell size={20} />\n                {unreadAlerts.length > 0 && (\n                  <Badge \n                    variant=\"destructive\" \n                    className=\"absolute -top-1 -right-1 h-5 w-5 flex items-center justify-center p-0 text-xs\"\n                  >\n                    {unreadAlerts.length}\n                  </Badge>\n                )}\n              </Button>\n            </div>\n            \n            <div className=\"flex items-center space-x-3\">\n              <img \n                src=\"https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=100&h=100\" \n                alt=\"Profile\" \n                className=\"w-8 h-8 rounded-full object-cover\"\n              />\n              <span className=\"text-sm font-medium text-gray-700\">John Doe</span>\n            </div>\n          </div>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":2483},"client/src/components/FeedbackChart.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useState } from \"react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport {\n  LineChart,\n  Line,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  Legend,\n  ResponsiveContainer,\n} from \"recharts\";\n\nconst DEMO_TENANT_ID = \"demo-tenant-001\";\n\nexport default function FeedbackChart() {\n  const [timeRange, setTimeRange] = useState(7);\n\n  const { data: trends, isLoading } = useQuery({\n    queryKey: ['/api/analytics/trends', DEMO_TENANT_ID, { days: timeRange }],\n    refetchInterval: 300000, // Refresh every 5 minutes\n  });\n\n  const chartData = trends?.map((trend: any) => ({\n    date: new Date(trend.date).toLocaleDateString('en-US', { weekday: 'short' }),\n    rating: trend.averageRating,\n    responses: trend.responseCount,\n  })) || [];\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm border border-gray-200\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between mb-6\">\n            <div className=\"h-6 bg-gray-200 rounded w-32 animate-pulse\"></div>\n            <div className=\"flex space-x-2\">\n              {[7, 30, 90].map((days) => (\n                <div key={days} className=\"h-8 bg-gray-200 rounded w-16 animate-pulse\"></div>\n              ))}\n            </div>\n          </div>\n          <div className=\"h-80 bg-gray-100 rounded animate-pulse\"></div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardContent className=\"p-6\">\n        <div className=\"flex items-center justify-between mb-6\">\n          <h3 className=\"text-lg font-semibold text-gray-900\">Feedback Trends</h3>\n          <div className=\"flex space-x-2\">\n            {[\n              { days: 7, label: \"7 Days\" },\n              { days: 30, label: \"30 Days\" },\n              { days: 90, label: \"90 Days\" },\n            ].map(({ days, label }) => (\n              <Button\n                key={days}\n                variant={timeRange === days ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setTimeRange(days)}\n              >\n                {label}\n              </Button>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"h-80\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" />\n              <XAxis dataKey=\"date\" />\n              <YAxis yAxisId=\"left\" domain={[0, 5]} />\n              <YAxis yAxisId=\"right\" orientation=\"right\" />\n              <Tooltip />\n              <Legend />\n              <Line\n                yAxisId=\"left\"\n                type=\"monotone\"\n                dataKey=\"rating\"\n                stroke=\"hsl(var(--primary))\"\n                strokeWidth={2}\n                name=\"Average Rating\"\n              />\n              <Line\n                yAxisId=\"right\"\n                type=\"monotone\"\n                dataKey=\"responses\"\n                stroke=\"hsl(142.1 70.6% 45.3%)\"\n                strokeWidth={2}\n                name=\"Response Count\"\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3301},"client/src/components/MetricsOverview.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Star, MessageSquare, AlertTriangle, QrCode } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\n\nconst DEMO_TENANT_ID = \"demo-tenant-001\";\n\nexport default function MetricsOverview() {\n  const { data: metrics, isLoading } = useQuery({\n    queryKey: ['/api/analytics/metrics', DEMO_TENANT_ID],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  const metricCards = [\n    {\n      title: \"Average Rating\",\n      value: metrics?.averageRating?.toFixed(1) || \"0.0\",\n      icon: Star,\n      bgColor: \"bg-primary-100\",\n      iconColor: \"text-primary-600\",\n      change: \"+0.3\",\n      changeLabel: \"vs last month\",\n      changeColor: \"text-success-600\"\n    },\n    {\n      title: \"Total Responses\",\n      value: metrics?.totalResponses?.toLocaleString() || \"0\",\n      icon: MessageSquare,\n      bgColor: \"bg-success-100\",\n      iconColor: \"text-success-600\",\n      change: \"+12%\",\n      changeLabel: \"vs last month\",\n      changeColor: \"text-success-600\"\n    },\n    {\n      title: \"Critical Alerts\",\n      value: metrics?.criticalAlerts || \"0\",\n      icon: AlertTriangle,\n      bgColor: \"bg-warning-100\",\n      iconColor: \"text-warning-600\",\n      change: \"Needs attention\",\n      changeLabel: \"\",\n      changeColor: \"text-destructive\"\n    },\n    {\n      title: \"QR Scans Today\",\n      value: metrics?.qrScansToday || \"0\",\n      icon: QrCode,\n      bgColor: \"bg-primary-100\",\n      iconColor: \"text-primary-600\",\n      change: \"+8%\",\n      changeLabel: \"vs yesterday\",\n      changeColor: \"text-success-600\"\n    }\n  ];\n\n  if (isLoading) {\n    return (\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n        {[...Array(4)].map((_, i) => (\n          <Card key={i} className=\"animate-pulse\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center\">\n                <div className=\"w-8 h-8 bg-gray-200 rounded-lg\"></div>\n                <div className=\"ml-4 flex-1\">\n                  <div className=\"h-4 bg-gray-200 rounded w-24 mb-2\"></div>\n                  <div className=\"h-6 bg-gray-200 rounded w-16\"></div>\n                </div>\n              </div>\n              <div className=\"mt-4\">\n                <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\n              </div>\n            </CardContent>\n          </Card>\n        ))}\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n      {metricCards.map((metric, index) => (\n        <Card key={index} className=\"shadow-sm border border-gray-200\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center\">\n              <div className={`flex-shrink-0 w-8 h-8 ${metric.bgColor} rounded-lg flex items-center justify-center`}>\n                <metric.icon className={`${metric.iconColor} w-4 h-4`} />\n              </div>\n              <div className=\"ml-4\">\n                <div className=\"text-sm font-medium text-gray-500\">{metric.title}</div>\n                <div className=\"text-2xl font-bold text-gray-900\">{metric.value}</div>\n              </div>\n            </div>\n            <div className=\"mt-4\">\n              <div className=\"flex items-center text-sm\">\n                <span className={`${metric.changeColor} font-medium`}>{metric.change}</span>\n                {metric.changeLabel && <span className=\"text-gray-500 ml-1\">{metric.changeLabel}</span>}\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":3579},"client/src/components/MobileFeedbackForm.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { Star, Mic, Camera, Send } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { ObjectUploader } from \"@/components/ObjectUploader\";\nimport type { UploadResult } from \"@uppy/core\";\n\nconst feedbackSchema = z.object({\n  customerName: z.string().min(1, \"Name is required\"),\n  customerEmail: z.string().email().optional().or(z.literal(\"\")),\n  overallRating: z.number().min(1, \"Please provide a rating\").max(5),\n  feedbackText: z.string().optional(),\n  customFields: z.record(z.any()).optional(),\n});\n\ntype FeedbackFormData = z.infer<typeof feedbackSchema>;\n\ninterface MobileFeedbackFormProps {\n  tenantId: string;\n  locationId: string;\n  qrId?: string | null;\n  tenant?: any;\n}\n\nexport default function MobileFeedbackForm({ \n  tenantId, \n  locationId, \n  qrId, \n  tenant \n}: MobileFeedbackFormProps) {\n  const [rating, setRating] = useState(0);\n  const [voiceRecordingUrl, setVoiceRecordingUrl] = useState<string>();\n  const [imageUrls, setImageUrls] = useState<string[]>([]);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n  const { toast } = useToast();\n\n  const form = useForm<FeedbackFormData>({\n    resolver: zodResolver(feedbackSchema),\n    defaultValues: {\n      customerName: \"\",\n      customerEmail: \"\",\n      overallRating: 0,\n      feedbackText: \"\",\n      customFields: {},\n    },\n  });\n\n  const submitFeedbackMutation = useMutation({\n    mutationFn: async (data: FeedbackFormData) => {\n      const response = await apiRequest('POST', '/api/feedback', {\n        ...data,\n        tenantId,\n        locationId,\n        qrCodeId: qrId,\n        voiceRecordingUrl,\n        imageUrls,\n      });\n      return response.json();\n    },\n    onSuccess: (feedback) => {\n      setIsSubmitted(true);\n      toast({\n        title: \"Thank you!\",\n        description: \"Your feedback has been submitted successfully.\",\n      });\n\n      // Update with uploaded files if any\n      if (voiceRecordingUrl || imageUrls.length > 0) {\n        apiRequest('PUT', `/api/feedback/${feedback.id}/files`, {\n          voiceRecordingURL: voiceRecordingUrl,\n          imageURLs: imageUrls,\n        });\n      }\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to submit feedback. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleVoiceUpload = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/objects/upload');\n      const { uploadURL } = await response.json();\n      return { method: 'PUT' as const, url: uploadURL };\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get upload URL for voice recording\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleVoiceComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful.length > 0) {\n      setVoiceRecordingUrl(result.successful[0].uploadURL as string);\n      toast({\n        title: \"Voice recorded\",\n        description: \"Your voice feedback has been recorded successfully.\",\n      });\n    }\n  };\n\n  const handleImageUpload = async () => {\n    try {\n      const response = await apiRequest('POST', '/api/objects/upload');\n      const { uploadURL } = await response.json();\n      return { method: 'PUT' as const, url: uploadURL };\n    } catch (error) {\n      toast({\n        title: \"Error\",\n        description: \"Failed to get upload URL for image\",\n        variant: \"destructive\",\n      });\n      throw error;\n    }\n  };\n\n  const handleImageComplete = (result: UploadResult<Record<string, unknown>, Record<string, unknown>>) => {\n    if (result.successful.length > 0) {\n      const newImageUrls = result.successful.map(file => file.uploadURL as string);\n      setImageUrls(prev => [...prev, ...newImageUrls]);\n      toast({\n        title: \"Image uploaded\",\n        description: \"Your image has been uploaded successfully.\",\n      });\n    }\n  };\n\n  const onSubmit = (data: FeedbackFormData) => {\n    const formData = {\n      ...data,\n      overallRating: rating,\n    };\n    submitFeedbackMutation.mutate(formData);\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"max-w-md mx-auto bg-white min-h-screen flex items-center justify-center\">\n        <Card className=\"w-full mx-4\">\n          <CardContent className=\"p-8 text-center\">\n            <div className=\"w-16 h-16 bg-success-100 rounded-full flex items-center justify-center mx-auto mb-4\">\n              <Send className=\"w-8 h-8 text-success-600\" />\n            </div>\n            <h2 className=\"text-xl font-bold text-gray-900 mb-2\">Thank You!</h2>\n            <p className=\"text-gray-600 mb-6\">\n              Your feedback has been submitted successfully. We appreciate your time and will use your input to improve our service.\n            </p>\n            <Button onClick={() => window.location.reload()} className=\"w-full\">\n              Submit Another Review\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen\">\n      {/* Mobile Header */}\n      <div className=\"bg-gradient-to-r from-primary to-primary/90 px-6 py-8 text-white\">\n        <div className=\"text-center\">\n          <img \n            src=\"https://images.unsplash.com/photo-1517248135467-4c7edcad34c4?ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxwaG90by1wYWdlfHx8fGVufDB8fHx8fA%3D%3D&auto=format&fit=crop&w=300&h=120\" \n            alt=\"Business\" \n            className=\"w-16 h-16 rounded-full mx-auto mb-4 object-cover border-2 border-white/20\"\n          />\n          <h1 className=\"text-xl font-bold\">\n            {tenant?.companyName || \"Business Name\"}\n          </h1>\n          <p className=\"text-primary-100\">\n            Main Location\n          </p>\n        </div>\n      </div>\n\n      {/* Feedback Form */}\n      <div className=\"px-6 py-6\">\n        <Form {...form}>\n          <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-lg font-semibold text-gray-900 mb-4\">\n                Tell us about your experience\n              </h2>\n              \n              <div className=\"space-y-4\">\n                <FormField\n                  control={form.control}\n                  name=\"customerName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Your Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"Enter your name\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                \n                <FormField\n                  control={form.control}\n                  name=\"customerEmail\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Email (Optional)</FormLabel>\n                      <FormControl>\n                        <Input type=\"email\" placeholder=\"your@email.com\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n            </div>\n\n            {/* Rating Section */}\n            <div>\n              <FormLabel className=\"block text-sm font-medium text-gray-700 mb-3\">\n                Overall Rating\n              </FormLabel>\n              <div className=\"flex justify-center space-x-2 mb-2\">\n                {[1, 2, 3, 4, 5].map((star) => (\n                  <button\n                    key={star}\n                    type=\"button\"\n                    className=\"w-12 h-12 text-2xl transition-colors\"\n                    onClick={() => {\n                      setRating(star);\n                      form.setValue(\"overallRating\", star);\n                    }}\n                  >\n                    <Star\n                      className={`w-8 h-8 ${\n                        star <= rating\n                          ? \"text-yellow-400 fill-current\"\n                          : \"text-gray-300\"\n                      }`}\n                    />\n                  </button>\n                ))}\n              </div>\n              <p className=\"text-center text-sm text-gray-500\">\n                Tap to rate your experience\n              </p>\n              {form.formState.errors.overallRating && (\n                <p className=\"text-center text-sm text-destructive mt-2\">\n                  {form.formState.errors.overallRating.message}\n                </p>\n              )}\n            </div>\n\n            {/* Feedback Text */}\n            <FormField\n              control={form.control}\n              name=\"feedbackText\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Your Feedback</FormLabel>\n                  <FormControl>\n                    <Textarea\n                      rows={4}\n                      placeholder=\"Tell us about your experience...\"\n                      {...field}\n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            {/* Multimedia Upload */}\n            <div>\n              <p className=\"text-sm font-medium text-gray-700 mb-3\">\n                Add Voice or Photos\n              </p>\n              <div className=\"grid grid-cols-2 gap-3\">\n                {/* Voice Recording */}\n                <ObjectUploader\n                  maxNumberOfFiles={1}\n                  maxFileSize={10485760} // 10MB\n                  onGetUploadParameters={handleVoiceUpload}\n                  onComplete={handleVoiceComplete}\n                  buttonClassName=\"flex flex-col items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-primary-400 transition-colors w-full\"\n                >\n                  <Mic className=\"text-2xl text-gray-400 mb-2\" />\n                  <span className=\"text-sm text-gray-600\">Record Voice</span>\n                  <span className=\"text-xs text-gray-500\">Up to 2 min</span>\n                </ObjectUploader>\n                \n                {/* Photo Upload */}\n                <ObjectUploader\n                  maxNumberOfFiles={3}\n                  maxFileSize={20971520} // 20MB\n                  onGetUploadParameters={handleImageUpload}\n                  onComplete={handleImageComplete}\n                  buttonClassName=\"flex flex-col items-center justify-center p-4 border-2 border-dashed border-gray-300 rounded-lg hover:border-primary-400 transition-colors w-full\"\n                >\n                  <Camera className=\"text-2xl text-gray-400 mb-2\" />\n                  <span className=\"text-sm text-gray-600\">Take Photo</span>\n                  <span className=\"text-xs text-gray-500\">Up to 20MB</span>\n                </ObjectUploader>\n              </div>\n\n              {/* Show uploaded files */}\n              {(voiceRecordingUrl || imageUrls.length > 0) && (\n                <div className=\"mt-3 space-y-2\">\n                  {voiceRecordingUrl && (\n                    <Badge variant=\"secondary\">\n                      <Mic className=\"w-3 h-3 mr-1\" />\n                      Voice recording added\n                    </Badge>\n                  )}\n                  {imageUrls.map((_, index) => (\n                    <Badge key={index} variant=\"secondary\">\n                      <Camera className=\"w-3 h-3 mr-1\" />\n                      Image {index + 1} added\n                    </Badge>\n                  ))}\n                </div>\n              )}\n            </div>\n\n            {/* Submit Button */}\n            <Button\n              type=\"submit\"\n              className=\"w-full py-4\"\n              disabled={submitFeedbackMutation.isPending}\n            >\n              {submitFeedbackMutation.isPending ? \"Submitting...\" : \"Submit Feedback\"}\n            </Button>\n          </form>\n        </Form>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12647},"client/src/components/ObjectUploader.tsx":{"content":"import { useState } from \"react\";\nimport type { ReactNode } from \"react\";\nimport Uppy from \"@uppy/core\";\nimport { DashboardModal } from \"@uppy/react\";\nimport \"@uppy/core/dist/style.min.css\";\nimport \"@uppy/dashboard/dist/style.min.css\";\nimport AwsS3 from \"@uppy/aws-s3\";\nimport type { UploadResult } from \"@uppy/core\";\nimport { Button } from \"@/components/ui/button\";\n\ninterface ObjectUploaderProps {\n  maxNumberOfFiles?: number;\n  maxFileSize?: number;\n  onGetUploadParameters: () => Promise<{\n    method: \"PUT\";\n    url: string;\n  }>;\n  onComplete?: (\n    result: UploadResult<Record<string, unknown>, Record<string, unknown>>\n  ) => void;\n  buttonClassName?: string;\n  children: ReactNode;\n}\n\n/**\n * A file upload component that renders as a button and provides a modal interface for\n * file management.\n * \n * Features:\n * - Renders as a customizable button that opens a file upload modal\n * - Provides a modal interface for:\n *   - File selection\n *   - File preview\n *   - Upload progress tracking\n *   - Upload status display\n * \n * The component uses Uppy under the hood to handle all file upload functionality.\n * All file management features are automatically handled by the Uppy dashboard modal.\n * \n * @param props - Component props\n * @param props.maxNumberOfFiles - Maximum number of files allowed to be uploaded\n *   (default: 1)\n * @param props.maxFileSize - Maximum file size in bytes (default: 10MB)\n * @param props.onGetUploadParameters - Function to get upload parameters (method and URL).\n *   Typically used to fetch a presigned URL from the backend server for direct-to-S3\n *   uploads.\n * @param props.onComplete - Callback function called when upload is complete. Typically\n *   used to make post-upload API calls to update server state and set object ACL\n *   policies.\n * @param props.buttonClassName - Optional CSS class name for the button\n * @param props.children - Content to be rendered inside the button\n */\nexport function ObjectUploader({\n  maxNumberOfFiles = 1,\n  maxFileSize = 10485760, // 10MB default\n  onGetUploadParameters,\n  onComplete,\n  buttonClassName,\n  children,\n}: ObjectUploaderProps) {\n  const [showModal, setShowModal] = useState(false);\n  const [uppy] = useState(() =>\n    new Uppy({\n      restrictions: {\n        maxNumberOfFiles,\n        maxFileSize,\n      },\n      autoProceed: false,\n    })\n      .use(AwsS3, {\n        shouldUseMultipart: false,\n        getUploadParameters: onGetUploadParameters,\n      })\n      .on(\"complete\", (result) => {\n        onComplete?.(result);\n      })\n  );\n\n  return (\n    <div>\n      <Button onClick={() => setShowModal(true)} className={buttonClassName}>\n        {children}\n      </Button>\n\n      <DashboardModal\n        uppy={uppy}\n        open={showModal}\n        onRequestClose={() => setShowModal(false)}\n        proudlyDisplayPoweredByUppy={false}\n      />\n    </div>\n  );\n}\n","size_bytes":2867},"client/src/components/QRCodeManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Plus, Download, QrCode, BarChart3, Trash2, Edit, MoreVertical } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst DEMO_TENANT_ID = \"a550e8e0-d5e7-4f82-8b9a-123456789012\";\n\nconst qrCodeSchema = z.object({\n  locationId: z.string().min(1, \"Location is required\"),\n  identifier: z.string().min(1, \"Table/Bed number is required\"),\n  section: z.string().optional(),\n});\n\ntype QRCodeFormData = z.infer<typeof qrCodeSchema>;\n\nexport default function QRCodeManagement() {\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [selectedLocation, setSelectedLocation] = useState<string>(\"all\");\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const form = useForm<QRCodeFormData>({\n    resolver: zodResolver(qrCodeSchema),\n    defaultValues: {\n      locationId: \"\",\n      identifier: \"\",\n      section: \"\",\n    },\n  });\n\n  // Fetch locations for the tenant\n  const { data: locations = [], isLoading: locationsLoading } = useQuery({\n    queryKey: ['/api/locations', DEMO_TENANT_ID],\n  });\n\n  // Fetch QR codes\n  const { data: qrCodes = [], isLoading: qrCodesLoading } = useQuery({\n    queryKey: ['/api/qr-codes', DEMO_TENANT_ID],\n    refetchInterval: 60000, // Refresh every minute for updated analytics\n  });\n\n  // Create QR code mutation\n  const createQrCodeMutation = useMutation({\n    mutationFn: async (data: QRCodeFormData) => {\n      const response = await apiRequest('POST', '/api/qr-codes', {\n        ...data,\n        tenantId: DEMO_TENANT_ID,\n      });\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"QR Code Generated\",\n        description: \"Your QR code has been generated successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/qr-codes'] });\n      setIsCreateModalOpen(false);\n      form.reset();\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to generate QR code. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: QRCodeFormData) => {\n    createQrCodeMutation.mutate(data);\n  };\n\n  const handleDownloadQR = (qrCode: any) => {\n    // Create download link for QR code image\n    const link = document.createElement('a');\n    link.href = qrCode.qrImageUrl;\n    link.download = `QR_${qrCode.identifier}_${qrCode.id}.png`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    toast({\n      title: \"Download Started\",\n      description: `QR code for ${qrCode.identifier} is being downloaded.`,\n    });\n  };\n\n  const handleBulkDownload = () => {\n    toast({\n      title: \"Bulk Download\",\n      description: \"Preparing bulk download of all QR codes...\",\n    });\n    // In a real implementation, this would create a ZIP file with all QR codes\n  };\n\n  const getLocationName = (locationId: string) => {\n    const location = locations?.find((loc: any) => loc.id === locationId);\n    return location?.name || \"Unknown Location\";\n  };\n\n  const filteredQrCodes = selectedLocation && selectedLocation !== \"all\"\n    ? qrCodes?.filter((qr: any) => qr.locationId === selectedLocation)\n    : qrCodes;\n\n  if (qrCodesLoading || locationsLoading) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <div>\n              <div className=\"h-6 bg-gray-200 rounded w-48 mb-2 animate-pulse\"></div>\n              <div className=\"h-4 bg-gray-200 rounded w-64 animate-pulse\"></div>\n            </div>\n            <div className=\"flex space-x-3\">\n              <div className=\"h-10 bg-gray-200 rounded w-32 animate-pulse\"></div>\n              <div className=\"h-10 bg-gray-200 rounded w-40 animate-pulse\"></div>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {[...Array(8)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"bg-gray-100 rounded-lg p-6 border\">\n                  <div className=\"w-32 h-32 bg-gray-200 rounded-lg mx-auto mb-4\"></div>\n                  <div className=\"h-5 bg-gray-200 rounded w-20 mx-auto mb-2\"></div>\n                  <div className=\"h-4 bg-gray-200 rounded w-24 mx-auto mb-4\"></div>\n                  <div className=\"space-y-2\">\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                    <div className=\"h-4 bg-gray-200 rounded\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <div>\n            <h3 className=\"text-lg font-semibold text-gray-900\">QR Code Management</h3>\n            <p className=\"text-sm text-gray-500\">Generate and manage QR codes for your locations</p>\n          </div>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={handleBulkDownload}>\n              <Download className=\"mr-2 h-4 w-4\" />\n              Bulk Download\n            </Button>\n            <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n              <DialogTrigger asChild>\n                <Button>\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Generate QR Code\n                </Button>\n              </DialogTrigger>\n              <DialogContent>\n                <DialogHeader>\n                  <DialogTitle>Generate New QR Code</DialogTitle>\n                </DialogHeader>\n                <Form {...form}>\n                  <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                    <FormField\n                      control={form.control}\n                      name=\"locationId\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Location</FormLabel>\n                          <Select onValueChange={field.onChange} value={field.value}>\n                            <FormControl>\n                              <SelectTrigger>\n                                <SelectValue placeholder=\"Select a location\" />\n                              </SelectTrigger>\n                            </FormControl>\n                            <SelectContent>\n                              {locations?.map((location: any) => (\n                                <SelectItem key={location.id} value={location.id}>\n                                  {location.name}\n                                </SelectItem>\n                              ))}\n                            </SelectContent>\n                          </Select>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"identifier\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Table/Room Number</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., Table 12, Room 205\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={form.control}\n                      name=\"section\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Section (Optional)</FormLabel>\n                          <FormControl>\n                            <Input placeholder=\"e.g., Patio, VIP, ICU\" {...field} />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n\n                    <div className=\"flex space-x-3 pt-4\">\n                      <Button\n                        type=\"button\"\n                        variant=\"outline\"\n                        className=\"flex-1\"\n                        onClick={() => setIsCreateModalOpen(false)}\n                      >\n                        Cancel\n                      </Button>\n                      <Button\n                        type=\"submit\"\n                        className=\"flex-1\"\n                        disabled={createQrCodeMutation.isPending}\n                      >\n                        {createQrCodeMutation.isPending ? \"Generating...\" : \"Generate QR Code\"}\n                      </Button>\n                    </div>\n                  </form>\n                </Form>\n              </DialogContent>\n            </Dialog>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      \n      <CardContent>\n        {/* Location Filter */}\n        <div className=\"mb-6 grid grid-cols-1 md:grid-cols-3 gap-4\">\n          <div>\n            <Label htmlFor=\"location-filter\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n              Filter by Location\n            </Label>\n            <Select value={selectedLocation} onValueChange={setSelectedLocation}>\n              <SelectTrigger id=\"location-filter\">\n                <SelectValue placeholder=\"All Locations\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">All Locations</SelectItem>\n                {locations?.map((location: any) => (\n                  <SelectItem key={location.id} value={location.id}>\n                    {location.name}\n                  </SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n        </div>\n        \n        {/* QR Codes Grid */}\n        {filteredQrCodes?.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <QrCode className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">No QR Codes Yet</h3>\n            <p className=\"text-gray-500 mb-4\">\n              Generate your first QR code to start collecting customer feedback.\n            </p>\n            <Button onClick={() => setIsCreateModalOpen(true)}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Generate First QR Code\n            </Button>\n          </div>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\">\n            {filteredQrCodes?.map((qrCode: any) => (\n              <Card key={qrCode.id} className=\"bg-gray-50 hover:shadow-md transition-shadow\">\n                <CardContent className=\"p-6 text-center\">\n                  {/* QR Code Image */}\n                  <div className=\"w-32 h-32 bg-white rounded-lg mx-auto mb-4 p-2 border border-gray-300\">\n                    {qrCode.qrImageUrl ? (\n                      <img\n                        src={qrCode.qrImageUrl}\n                        alt={`QR Code for ${qrCode.identifier}`}\n                        className=\"w-full h-full object-contain\"\n                      />\n                    ) : (\n                      <div className=\"w-full h-full bg-gradient-to-br from-gray-800 to-gray-900 rounded flex items-center justify-center\">\n                        <QrCode className=\"w-16 h-16 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  \n                  {/* QR Code Info */}\n                  <h4 className=\"font-semibold text-gray-900 mb-2\">{qrCode.identifier}</h4>\n                  <p className=\"text-sm text-gray-500 mb-2\">{getLocationName(qrCode.locationId)}</p>\n                  {qrCode.section && (\n                    <Badge variant=\"outline\" className=\"mb-4\">\n                      {qrCode.section}\n                    </Badge>\n                  )}\n                  \n                  {/* Analytics */}\n                  <div className=\"space-y-2 mb-4\">\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Scans Today:</span>\n                      <span className=\"font-medium\">{qrCode.scansToday || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Total Scans:</span>\n                      <span className=\"font-medium\">{qrCode.totalScans || 0}</span>\n                    </div>\n                    <div className=\"flex justify-between text-sm\">\n                      <span className=\"text-gray-500\">Completion Rate:</span>\n                      <span className=\"font-medium text-success\">\n                        {qrCode.completionRate || 0}%\n                      </span>\n                    </div>\n                  </div>\n                  \n                  {/* Action Buttons */}\n                  <div className=\"flex space-x-2\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"flex-1\"\n                      onClick={() => handleDownloadQR(qrCode)}\n                    >\n                      <Download className=\"mr-1 h-3 w-3\" />\n                      Download\n                    </Button>\n                    <Button variant=\"outline\" size=\"sm\" className=\"flex-1\">\n                      <BarChart3 className=\"mr-1 h-3 w-3\" />\n                      Analytics\n                    </Button>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreVertical className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem className=\"text-destructive\">\n                          <Trash2 className=\"mr-2 h-4 w-4\" />\n                          Delete\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":15643},"client/src/components/RecentAlerts.tsx":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { AlertTriangle, Clock, Info } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useEffect } from \"react\";\nimport { connectWebSocket } from \"@/lib/websocket\";\n\nconst DEMO_TENANT_ID = \"demo-tenant-001\";\n\nexport default function RecentAlerts() {\n  const queryClient = useQueryClient();\n\n  const { data: alerts, isLoading } = useQuery({\n    queryKey: ['/api/alerts', DEMO_TENANT_ID, { limit: 10 }],\n    refetchInterval: 30000, // Refresh every 30 seconds\n  });\n\n  const markAsReadMutation = useMutation({\n    mutationFn: async (alertId: string) => {\n      return await apiRequest('PATCH', `/api/alerts/${alertId}/read`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['/api/alerts'] });\n    },\n  });\n\n  // Connect to WebSocket for real-time alerts\n  useEffect(() => {\n    const ws = connectWebSocket();\n    \n    ws.onmessage = (event) => {\n      const data = JSON.parse(event.data);\n      if (data.type === 'alert') {\n        // Add new alert to the cache\n        queryClient.setQueryData(\n          ['/api/alerts', DEMO_TENANT_ID, { limit: 10 }],\n          (oldAlerts: any) => [data.data, ...(oldAlerts || [])].slice(0, 10)\n        );\n      }\n    };\n\n    // Send authentication\n    ws.onopen = () => {\n      ws.send(JSON.stringify({ type: 'auth', tenantId: DEMO_TENANT_ID }));\n    };\n\n    return () => ws.close();\n  }, [queryClient]);\n\n  const getAlertIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return <AlertTriangle className=\"text-destructive w-4 h-4\" />;\n      case 'warning':\n        return <Clock className=\"text-warning w-4 h-4\" />;\n      default:\n        return <Info className=\"text-primary w-4 h-4\" />;\n    }\n  };\n\n  const getAlertBgColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n        return 'bg-destructive/10 border-destructive/20';\n      case 'warning':\n        return 'bg-warning/10 border-warning/20';\n      default:\n        return 'bg-primary/10 border-primary/20';\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm border border-gray-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Recent Alerts</span>\n            <div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\"></div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(3)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-start space-x-3 p-3 bg-gray-50 rounded-lg\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-32 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-48 mb-1\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-20\"></div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Recent Alerts</span>\n          <Button variant=\"link\" size=\"sm\">\n            View All\n          </Button>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-4\">\n          {alerts?.length === 0 ? (\n            <div className=\"text-center py-8 text-gray-500\">\n              <Info className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n              <p>No recent alerts</p>\n            </div>\n          ) : (\n            alerts?.map((alert: any) => (\n              <div\n                key={alert.id}\n                className={`flex items-start space-x-3 p-3 rounded-lg border ${getAlertBgColor(alert.severity)}`}\n              >\n                <div className=\"flex-shrink-0\">\n                  <div className=\"w-8 h-8 rounded-full flex items-center justify-center bg-white/50\">\n                    {getAlertIcon(alert.severity)}\n                  </div>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <p className=\"text-sm font-medium text-gray-900\">{alert.title}</p>\n                  <p className=\"text-sm text-gray-500\">{alert.message}</p>\n                  <p className=\"text-xs text-gray-400 mt-1\">\n                    {new Date(alert.createdAt).toLocaleString()}\n                  </p>\n                  {!alert.isRead && (\n                    <Button\n                      variant=\"link\"\n                      size=\"sm\"\n                      className=\"p-0 h-auto text-xs mt-1\"\n                      onClick={() => markAsReadMutation.mutate(alert.id)}\n                      disabled={markAsReadMutation.isPending}\n                    >\n                      Mark as read\n                    </Button>\n                  )}\n                </div>\n              </div>\n            ))\n          )}\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":5330},"client/src/components/RecentFeedback.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Star, User, Mic, Image, Eye, MessageSquare } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Table,\n  TableBody,\n  TableCell,\n  TableHead,\n  TableHeader,\n  TableRow,\n} from \"@/components/ui/table\";\n\nconst DEMO_TENANT_ID = \"demo-tenant-001\";\n\nexport default function RecentFeedback() {\n  const { data: feedback, isLoading } = useQuery({\n    queryKey: ['/api/feedback', DEMO_TENANT_ID, { limit: 10 }],\n    refetchInterval: 60000, // Refresh every minute\n  });\n\n  const renderStarRating = (rating: number) => {\n    return (\n      <div className=\"flex items-center\">\n        <div className=\"flex text-yellow-400\">\n          {[...Array(5)].map((_, i) => (\n            <Star\n              key={i}\n              size={14}\n              className={i < rating ? \"fill-current\" : \"\"}\n            />\n          ))}\n        </div>\n        <span className=\"ml-2 text-sm text-gray-600\">{rating}.0</span>\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <Card className=\"shadow-sm border border-gray-200\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>Recent Feedback</span>\n            <div className=\"flex space-x-2\">\n              <div className=\"h-8 bg-gray-200 rounded w-16 animate-pulse\"></div>\n              <div className=\"h-8 bg-gray-200 rounded w-16 animate-pulse\"></div>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <div key={i} className=\"animate-pulse\">\n                <div className=\"flex items-center space-x-4 p-4 border-b\">\n                  <div className=\"w-8 h-8 bg-gray-200 rounded-full\"></div>\n                  <div className=\"flex-1\">\n                    <div className=\"h-4 bg-gray-200 rounded w-32 mb-2\"></div>\n                    <div className=\"h-3 bg-gray-200 rounded w-48\"></div>\n                  </div>\n                  <div className=\"h-4 bg-gray-200 rounded w-16\"></div>\n                </div>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className=\"shadow-sm border border-gray-200\">\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Recent Feedback</span>\n          <div className=\"flex space-x-2\">\n            <Button variant=\"outline\" size=\"sm\">\n              <MessageSquare className=\"mr-1 h-4 w-4\" />\n              Filter\n            </Button>\n            <Button variant=\"outline\" size=\"sm\">\n              <Eye className=\"mr-1 h-4 w-4\" />\n              Export\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <div className=\"overflow-hidden\">\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Customer</TableHead>\n                <TableHead>Location</TableHead>\n                <TableHead>Rating</TableHead>\n                <TableHead>Feedback</TableHead>\n                <TableHead>Time</TableHead>\n                <TableHead>Actions</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {feedback?.length === 0 ? (\n                <TableRow>\n                  <TableCell colSpan={6} className=\"text-center py-8 text-gray-500\">\n                    <MessageSquare className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                    <p>No feedback responses yet</p>\n                  </TableCell>\n                </TableRow>\n              ) : (\n                feedback?.map((item: any) => (\n                  <TableRow key={item.id} className=\"hover:bg-gray-50\">\n                    <TableCell>\n                      <div className=\"flex items-center\">\n                        <div className=\"flex-shrink-0\">\n                          <div className=\"w-8 h-8 bg-gray-200 rounded-full flex items-center justify-center\">\n                            <User className=\"text-gray-500 w-4 h-4\" />\n                          </div>\n                        </div>\n                        <div className=\"ml-3\">\n                          <div className=\"text-sm font-medium text-gray-900\">\n                            {item.customerName || \"Anonymous\"}\n                          </div>\n                          {item.customerEmail && (\n                            <div className=\"text-sm text-gray-500\">{item.customerEmail}</div>\n                          )}\n                        </div>\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-900\">Main Location</div>\n                      <div className=\"text-sm text-gray-500\">\n                        {item.qrCodeId ? \"QR Code\" : \"Direct\"}\n                      </div>\n                    </TableCell>\n                    <TableCell>\n                      {renderStarRating(item.overallRating)}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"text-sm text-gray-900 max-w-xs truncate\">\n                        {item.feedbackText || \"No text feedback\"}\n                      </div>\n                      <div className=\"flex items-center mt-1 space-x-2\">\n                        {item.voiceRecordingUrl && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            <Mic className=\"mr-1 w-3 h-3\" />\n                            Voice\n                          </Badge>\n                        )}\n                        {item.imageUrls && item.imageUrls.length > 0 && (\n                          <Badge variant=\"secondary\" className=\"text-xs\">\n                            <Image className=\"mr-1 w-3 h-3\" />\n                            Photo\n                          </Badge>\n                        )}\n                        {item.customFields && Object.keys(item.customFields).length > 0 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            Custom Fields\n                          </Badge>\n                        )}\n                      </div>\n                    </TableCell>\n                    <TableCell className=\"text-sm text-gray-500\">\n                      {new Date(item.createdAt).toLocaleString()}\n                    </TableCell>\n                    <TableCell>\n                      <div className=\"flex space-x-2\">\n                        <Button variant=\"link\" size=\"sm\">\n                          View\n                        </Button>\n                        <Button variant=\"link\" size=\"sm\">\n                          Respond\n                        </Button>\n                      </div>\n                    </TableCell>\n                  </TableRow>\n                ))\n              )}\n            </TableBody>\n          </Table>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":7140},"client/src/components/SurveyBuilder.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\nimport { \n  Type, \n  Star, \n  ChevronDown, \n  AlignLeft, \n  Hash, \n  Calendar,\n  Save,\n  Eye,\n  Trash2,\n  Edit,\n  Plus\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nconst DEMO_TENANT_ID = \"demo-tenant-001\";\n\nconst fieldTypes = [\n  { id: 'text', icon: Type, label: 'Text Input', color: 'text-blue-500' },\n  { id: 'rating', icon: Star, label: 'Rating Scale', color: 'text-yellow-500' },\n  { id: 'dropdown', icon: ChevronDown, label: 'Dropdown', color: 'text-green-500' },\n  { id: 'textarea', icon: AlignLeft, label: 'Text Area', color: 'text-purple-500' },\n  { id: 'number', icon: Hash, label: 'Number', color: 'text-red-500' },\n  { id: 'date', icon: Calendar, label: 'Date', color: 'text-indigo-500' },\n];\n\ninterface FormField {\n  id: string;\n  type: string;\n  label: string;\n  placeholder?: string;\n  required: boolean;\n  options?: string[];\n  max?: number;\n}\n\nexport default function SurveyBuilder() {\n  const [selectedTemplate, setSelectedTemplate] = useState<string>(\"\");\n  const [formFields, setFormFields] = useState<FormField[]>([\n    {\n      id: 'customer_name',\n      type: 'text',\n      label: 'Customer Name',\n      placeholder: 'Enter your name',\n      required: true,\n    }\n  ]);\n  const [selectedField, setSelectedField] = useState<FormField | null>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const { data: templates, isLoading: templatesLoading } = useQuery({\n    queryKey: ['/api/survey-templates', DEMO_TENANT_ID],\n  });\n\n  const saveTemplateMutation = useMutation({\n    mutationFn: async (templateData: any) => {\n      const response = await apiRequest('POST', '/api/survey-templates', templateData);\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"Template saved\",\n        description: \"Your survey template has been saved successfully.\",\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/survey-templates'] });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to save template. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleDragEnd = (result: any) => {\n    if (!result.destination) return;\n\n    const { source, destination } = result;\n\n    if (source.droppableId === \"field-types\" && destination.droppableId === \"form-canvas\") {\n      // Add new field to form\n      const fieldType = fieldTypes.find(f => f.id === result.draggableId);\n      if (fieldType) {\n        const newField: FormField = {\n          id: `field_${Date.now()}`,\n          type: fieldType.id,\n          label: fieldType.label,\n          placeholder: `Enter ${fieldType.label.toLowerCase()}`,\n          required: false,\n          ...(fieldType.id === 'rating' && { max: 5 }),\n          ...(fieldType.id === 'dropdown' && { options: ['Option 1', 'Option 2'] }),\n        };\n        setFormFields(prev => [...prev, newField]);\n      }\n    } else if (source.droppableId === \"form-canvas\" && destination.droppableId === \"form-canvas\") {\n      // Reorder fields in form\n      const items = Array.from(formFields);\n      const [reorderedItem] = items.splice(source.index, 1);\n      items.splice(destination.index, 0, reorderedItem);\n      setFormFields(items);\n    }\n  };\n\n  const handleFieldUpdate = (updatedField: FormField) => {\n    setFormFields(prev => \n      prev.map(field => field.id === updatedField.id ? updatedField : field)\n    );\n    setSelectedField(updatedField);\n  };\n\n  const handleFieldDelete = (fieldId: string) => {\n    setFormFields(prev => prev.filter(field => field.id !== fieldId));\n    if (selectedField?.id === fieldId) {\n      setSelectedField(null);\n    }\n  };\n\n  const handleSaveTemplate = () => {\n    const templateData = {\n      tenantId: DEMO_TENANT_ID,\n      name: \"Custom Survey Template\",\n      description: \"Custom survey created with form builder\",\n      industry: \"General\",\n      fields: formFields,\n      isDefault: false,\n      isActive: true,\n    };\n    saveTemplateMutation.mutate(templateData);\n  };\n\n  const renderFieldPreview = (field: FormField) => {\n    switch (field.type) {\n      case 'text':\n        return (\n          <Input\n            placeholder={field.placeholder}\n            disabled\n            className=\"w-full\"\n          />\n        );\n      case 'textarea':\n        return (\n          <textarea\n            placeholder={field.placeholder}\n            disabled\n            className=\"w-full px-3 py-2 border border-gray-300 rounded-md resize-none\"\n            rows={3}\n          />\n        );\n      case 'rating':\n        return (\n          <div className=\"flex space-x-1\">\n            {[...Array(field.max || 5)].map((_, i) => (\n              <Star key={i} className=\"w-6 h-6 text-gray-300\" />\n            ))}\n          </div>\n        );\n      case 'dropdown':\n        return (\n          <select disabled className=\"w-full px-3 py-2 border border-gray-300 rounded-md\">\n            <option>Select an option</option>\n            {field.options?.map((option, i) => (\n              <option key={i}>{option}</option>\n            ))}\n          </select>\n        );\n      case 'number':\n        return (\n          <Input\n            type=\"number\"\n            placeholder={field.placeholder}\n            disabled\n            className=\"w-full\"\n          />\n        );\n      case 'date':\n        return (\n          <Input\n            type=\"date\"\n            disabled\n            className=\"w-full\"\n          />\n        );\n      default:\n        return (\n          <Input\n            placeholder={field.placeholder}\n            disabled\n            className=\"w-full\"\n          />\n        );\n    }\n  };\n\n  if (templatesLoading) {\n    return (\n      <Card>\n        <CardContent className=\"p-6\">\n          <div className=\"animate-pulse space-y-4\">\n            <div className=\"h-8 bg-gray-200 rounded w-48\"></div>\n            <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n              <div className=\"space-y-4\">\n                {[...Array(6)].map((_, i) => (\n                  <div key={i} className=\"h-16 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n              <div className=\"lg:col-span-2 h-96 bg-gray-200 rounded\"></div>\n              <div className=\"space-y-4\">\n                {[...Array(4)].map((_, i) => (\n                  <div key={i} className=\"h-8 bg-gray-200 rounded\"></div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card>\n      <CardHeader>\n        <CardTitle className=\"flex items-center justify-between\">\n          <span>Survey Builder</span>\n          <div className=\"flex space-x-3\">\n            <Button variant=\"outline\" onClick={handleSaveTemplate} disabled={saveTemplateMutation.isPending}>\n              <Save className=\"mr-2 h-4 w-4\" />\n              {saveTemplateMutation.isPending ? \"Saving...\" : \"Save Draft\"}\n            </Button>\n            <Button>\n              <Eye className=\"mr-2 h-4 w-4\" />\n              Preview\n            </Button>\n          </div>\n        </CardTitle>\n      </CardHeader>\n      <CardContent>\n        <DragDropContext onDragEnd={handleDragEnd}>\n          <div className=\"grid grid-cols-1 lg:grid-cols-4 gap-6\">\n            {/* Field Types Sidebar */}\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Field Types</h4>\n              <Droppable droppableId=\"field-types\" isDropDisabled={true}>\n                {(provided) => (\n                  <div {...provided.droppableProps} ref={provided.innerRef} className=\"space-y-2\">\n                    {fieldTypes.map((fieldType, index) => (\n                      <Draggable key={fieldType.id} draggableId={fieldType.id} index={index}>\n                        {(provided, snapshot) => (\n                          <div\n                            ref={provided.innerRef}\n                            {...provided.draggableProps}\n                            {...provided.dragHandleProps}\n                            className={`p-3 border border-gray-200 rounded-lg cursor-move hover:bg-gray-50 transition-colors ${\n                              snapshot.isDragging ? 'bg-blue-50 border-blue-300' : ''\n                            }`}\n                          >\n                            <div className=\"flex items-center\">\n                              <fieldType.icon className={`${fieldType.color} mr-3 w-4 h-4`} />\n                              <span className=\"text-sm font-medium\">{fieldType.label}</span>\n                            </div>\n                          </div>\n                        )}\n                      </Draggable>\n                    ))}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n            \n            {/* Form Builder Canvas */}\n            <div className=\"lg:col-span-2\">\n              <Droppable droppableId=\"form-canvas\">\n                {(provided, snapshot) => (\n                  <div\n                    {...provided.droppableProps}\n                    ref={provided.innerRef}\n                    className={`border-2 border-dashed rounded-lg min-h-96 p-6 transition-colors ${\n                      snapshot.isDraggingOver \n                        ? 'border-blue-400 bg-blue-50' \n                        : 'border-gray-300'\n                    }`}\n                  >\n                    {formFields.length === 0 ? (\n                      <div className=\"text-center py-8\">\n                        <Plus className=\"text-4xl text-gray-300 mb-4 mx-auto\" />\n                        <p className=\"text-gray-500\">Drag field types here to build your survey</p>\n                      </div>\n                    ) : (\n                      <div className=\"space-y-4\">\n                        {formFields.map((field, index) => (\n                          <Draggable key={field.id} draggableId={field.id} index={index}>\n                            {(provided, snapshot) => (\n                              <div\n                                ref={provided.innerRef}\n                                {...provided.draggableProps}\n                                {...provided.dragHandleProps}\n                                className={`bg-white border border-gray-200 rounded-lg p-4 group hover:border-primary-300 transition-colors ${\n                                  snapshot.isDragging ? 'shadow-lg' : ''\n                                } ${\n                                  selectedField?.id === field.id ? 'border-primary-500 ring-1 ring-primary-200' : ''\n                                }`}\n                                onClick={() => setSelectedField(field)}\n                              >\n                                <div className=\"flex items-center justify-between mb-2\">\n                                  <Label className=\"text-sm font-medium text-gray-700\">\n                                    {field.label}\n                                    {field.required && <span className=\"text-red-500 ml-1\">*</span>}\n                                  </Label>\n                                  <div className=\"opacity-0 group-hover:opacity-100 flex space-x-2 transition-opacity\">\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        setSelectedField(field);\n                                      }}\n                                    >\n                                      <Edit className=\"w-3 h-3\" />\n                                    </Button>\n                                    <Button\n                                      variant=\"ghost\"\n                                      size=\"sm\"\n                                      onClick={(e) => {\n                                        e.stopPropagation();\n                                        handleFieldDelete(field.id);\n                                      }}\n                                    >\n                                      <Trash2 className=\"w-3 h-3 text-red-500\" />\n                                    </Button>\n                                  </div>\n                                </div>\n                                {renderFieldPreview(field)}\n                                <div className=\"mt-2 flex items-center text-xs text-gray-500\">\n                                  <Checkbox checked={field.required} disabled className=\"mr-2\" />\n                                  <span>Required field</span>\n                                </div>\n                              </div>\n                            )}\n                          </Draggable>\n                        ))}\n                      </div>\n                    )}\n                    {provided.placeholder}\n                  </div>\n                )}\n              </Droppable>\n            </div>\n            \n            {/* Field Properties */}\n            <div>\n              <h4 className=\"text-sm font-medium text-gray-900 mb-4\">Field Properties</h4>\n              {selectedField ? (\n                <div className=\"space-y-4\">\n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-1\">Field Label</Label>\n                    <Input\n                      value={selectedField.label}\n                      onChange={(e) => handleFieldUpdate({ ...selectedField, label: e.target.value })}\n                      className=\"text-sm\"\n                    />\n                  </div>\n                  \n                  <div>\n                    <Label className=\"text-sm font-medium text-gray-700 mb-1\">Placeholder</Label>\n                    <Input\n                      value={selectedField.placeholder || \"\"}\n                      onChange={(e) => handleFieldUpdate({ ...selectedField, placeholder: e.target.value })}\n                      className=\"text-sm\"\n                    />\n                  </div>\n                  \n                  {selectedField.type === 'rating' && (\n                    <div>\n                      <Label className=\"text-sm font-medium text-gray-700 mb-1\">Max Rating</Label>\n                      <Input\n                        type=\"number\"\n                        min=\"3\"\n                        max=\"10\"\n                        value={selectedField.max || 5}\n                        onChange={(e) => handleFieldUpdate({ ...selectedField, max: parseInt(e.target.value) })}\n                        className=\"text-sm\"\n                      />\n                    </div>\n                  )}\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      checked={selectedField.required}\n                      onCheckedChange={(checked) => \n                        handleFieldUpdate({ ...selectedField, required: checked as boolean })\n                      }\n                    />\n                    <Label className=\"text-sm text-gray-700\">Required field</Label>\n                  </div>\n                  \n                  <div className=\"flex items-center space-x-2\">\n                    <Checkbox defaultChecked />\n                    <Label className=\"text-sm text-gray-700\">Show in analytics</Label>\n                  </div>\n                </div>\n              ) : (\n                <div className=\"text-center py-8 text-gray-500\">\n                  <Edit className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\n                  <p className=\"text-sm\">Select a field to edit its properties</p>\n                </div>\n              )}\n            </div>\n          </div>\n        </DragDropContext>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":16343},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/lib/websocket.ts":{"content":"let ws: WebSocket | null = null;\n\nexport function connectWebSocket(): WebSocket {\n  if (ws && ws.readyState === WebSocket.OPEN) {\n    return ws;\n  }\n\n  const protocol = window.location.protocol === \"https:\" ? \"wss:\" : \"ws:\";\n  const wsUrl = `${protocol}//${window.location.host}/ws`;\n  \n  ws = new WebSocket(wsUrl);\n\n  ws.onopen = () => {\n    console.log('WebSocket connected');\n  };\n\n  ws.onclose = (event) => {\n    console.log('WebSocket disconnected:', event.code, event.reason);\n    // Attempt to reconnect after a delay\n    setTimeout(() => {\n      if (ws?.readyState === WebSocket.CLOSED) {\n        connectWebSocket();\n      }\n    }, 5000);\n  };\n\n  ws.onerror = (error) => {\n    console.error('WebSocket error:', error);\n  };\n\n  return ws;\n}\n\nexport function sendWebSocketMessage(message: any): void {\n  if (ws && ws.readyState === WebSocket.OPEN) {\n    ws.send(JSON.stringify(message));\n  } else {\n    console.warn('WebSocket is not open. Message not sent:', message);\n  }\n}\n\nexport function closeWebSocket(): void {\n  if (ws) {\n    ws.close();\n    ws = null;\n  }\n}\n","size_bytes":1073},"client/src/pages/dashboard.tsx":{"content":"import { useState } from \"react\";\nimport DashboardHeader from \"@/components/DashboardHeader\";\nimport MetricsOverview from \"@/components/MetricsOverview\";\nimport FeedbackChart from \"@/components/FeedbackChart\";\nimport RecentAlerts from \"@/components/RecentAlerts\";\nimport RecentFeedback from \"@/components/RecentFeedback\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\n\nexport default function Dashboard() {\n  const [selectedView, setSelectedView] = useState('dashboard');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation Tabs */}\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex space-x-8\">\n            <Button\n              variant={selectedView === 'dashboard' ? \"default\" : \"ghost\"}\n              className=\"px-4 py-3 text-sm font-medium rounded-none border-b-2 border-transparent\"\n              onClick={() => setSelectedView('dashboard')}\n            >\n              Business Dashboard\n            </Button>\n            <Link href=\"/feedback\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Customer Feedback (Mobile)\n              </Button>\n            </Link>\n            <Link href=\"/survey-builder\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Survey Builder\n              </Button>\n            </Link>\n            <Link href=\"/qr-management\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                QR Code Management\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"pt-16\">\n        <DashboardHeader />\n        \n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <MetricsOverview />\n          \n          <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n            <div className=\"lg:col-span-2\">\n              <FeedbackChart />\n            </div>\n            <div>\n              <RecentAlerts />\n            </div>\n          </div>\n\n          <div className=\"mt-8\">\n            <RecentFeedback />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":2489},"client/src/pages/feedback.tsx":{"content":"import { useLocation } from \"wouter\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport MobileFeedbackForm from \"@/components/MobileFeedbackForm\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function FeedbackForm() {\n  const [location] = useLocation();\n  const searchParams = new URLSearchParams(location.split('?')[1] || '');\n  const tenantId = searchParams.get('t');\n  const locationId = searchParams.get('l');\n  const qrId = searchParams.get('q');\n\n  // Track QR scan if qrId is present\n  const { data: qrScanTracked } = useQuery({\n    queryKey: ['/api/qr-codes', qrId, 'scan'],\n    queryFn: async () => {\n      if (qrId) {\n        const response = await fetch(`/api/qr-codes/${qrId}/scan`, {\n          method: 'POST',\n        });\n        return response.json();\n      }\n      return null;\n    },\n    enabled: !!qrId,\n  });\n\n  // Get tenant information\n  const { data: tenant, isLoading: tenantLoading } = useQuery({\n    queryKey: ['/api/tenants', tenantId],\n    enabled: !!tenantId,\n  });\n\n  if (!tenantId || !locationId) {\n    return (\n      <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n        <Card className=\"w-full max-w-md mx-4\">\n          <CardContent className=\"pt-6\">\n            <div className=\"flex mb-4 gap-2\">\n              <AlertCircle className=\"h-8 w-8 text-red-500\" />\n              <h1 className=\"text-2xl font-bold text-gray-900\">Invalid Link</h1>\n            </div>\n            <p className=\"mt-4 text-sm text-gray-600\">\n              This feedback link appears to be invalid. Please scan the QR code again or contact the business for assistance.\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (tenantLoading) {\n    return (\n      <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n        <div className=\"animate-spin rounded-full h-32 w-32 border-b-2 border-primary\"></div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      <MobileFeedbackForm \n        tenantId={tenantId}\n        locationId={locationId}\n        qrId={qrId}\n        tenant={tenant}\n      />\n    </div>\n  );\n}\n","size_bytes":2230},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/qr-management.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport QRCodeManagement from \"@/components/QRCodeManagement\";\n\nexport default function QRManagementPage() {\n  const [selectedView, setSelectedView] = useState('qr-management');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation Tabs */}\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex space-x-8\">\n            <Link href=\"/\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Business Dashboard\n              </Button>\n            </Link>\n            <Link href=\"/feedback\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Customer Feedback (Mobile)\n              </Button>\n            </Link>\n            <Link href=\"/survey-builder\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Survey Builder\n              </Button>\n            </Link>\n            <Button\n              variant={selectedView === 'qr-management' ? \"default\" : \"ghost\"}\n              className=\"px-4 py-3 text-sm font-medium rounded-none border-b-2 border-transparent\"\n              onClick={() => setSelectedView('qr-management')}\n            >\n              QR Code Management\n            </Button>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"pt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <QRCodeManagement />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1894},"client/src/pages/survey-builder.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport SurveyBuilder from \"@/components/SurveyBuilder\";\n\nexport default function SurveyBuilderPage() {\n  const [selectedView, setSelectedView] = useState('survey-builder');\n\n  return (\n    <div className=\"min-h-screen bg-gray-50\">\n      {/* Navigation Tabs */}\n      <div className=\"fixed top-0 left-0 right-0 z-50 bg-white border-b border-gray-200 shadow-sm\">\n        <div className=\"max-w-7xl mx-auto px-4\">\n          <div className=\"flex space-x-8\">\n            <Link href=\"/\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Business Dashboard\n              </Button>\n            </Link>\n            <Link href=\"/feedback\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                Customer Feedback (Mobile)\n              </Button>\n            </Link>\n            <Button\n              variant={selectedView === 'survey-builder' ? \"default\" : \"ghost\"}\n              className=\"px-4 py-3 text-sm font-medium rounded-none border-b-2 border-transparent\"\n              onClick={() => setSelectedView('survey-builder')}\n            >\n              Survey Builder\n            </Button>\n            <Link href=\"/qr-management\">\n              <Button\n                variant=\"ghost\"\n                className=\"px-4 py-3 text-sm font-medium rounded-none\"\n              >\n                QR Code Management\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"pt-16\">\n        <div className=\"max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8\">\n          <SurveyBuilder />\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1888},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}}}